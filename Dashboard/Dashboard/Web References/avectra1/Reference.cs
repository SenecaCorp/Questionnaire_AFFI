//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Dashboard.avectra1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="netForumXML OnDemandSoap", Namespace="http://www.avectra.com/OnDemand/2005/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultListOfOrganizationByPrimaryInd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultListOfIndividualRelationshipResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultListOfOrganizationByTypeResult))]
    public partial class netForumXMLOnDemand : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthorizationToken authorizationTokenValueField;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacadeXMLSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacadeObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuery2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerMembershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByZipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByCityStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByCityStateMembershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByRadiusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByRadiusAddressTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByRecordDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerDirectoryByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByWebsiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventRegistrantByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegistrantsByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveEventListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveEventListByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventByProductKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerTicketedSessionsByRegKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionListByEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventCustomerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionCustomerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductBalancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEWebUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitteeByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitteeByCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitteeListByCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitteeListByCstIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitteePatricipationByCstIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveProductListByIndividualOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPricesByProductKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveProductListByCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveSubscriptionByCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMembershipProxyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMembershipsByCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewOrganizationInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOrganizationInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewIndividualInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIndividualInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomerRelationshipOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomerRelationshipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerActivityHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewHistoricalActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetHistoricalActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificationProductsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificantsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificationProgramsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificantsByProgramOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyByOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyByCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultiSelectValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAwardEntriesByCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAwardEntriesByAwardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAwardJudgesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationByEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTracksByEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionsByTrackCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoomByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoomSessionByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpeakerInfoBySessionKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIndividualChangesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationChangesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMembershipChangesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegistrantChangesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitteeParticipationChangesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIndividualByDemographicOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationByDemographicOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventFeesByEventKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCstKeyFromLicenseNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCstKeyFromRealtorIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerByMembershipTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildOrgsByParentOrgKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerRealtorMembershipListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventListByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIndividualListByOrganizationRelationshipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIndividualListByChangedDateRelationshipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRelationshipsByIndividualOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerCertificationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIndividualByPrimaryOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveSubscriptionByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRegistrationBadgePrintDateByRegKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationsByPrimaryIndividualOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public netForumXMLOnDemand() {
            this.Url = global::Dashboard.Properties.Settings.Default.Dashboard_avectra1_netForumXML_x0020_OnDemand;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthorizationToken AuthorizationTokenValue {
            get {
                return this.authorizationTokenValueField;
            }
            set {
                this.authorizationTokenValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event GetFacadeXMLSchemaCompletedEventHandler GetFacadeXMLSchemaCompleted;
        
        /// <remarks/>
        public event GetFacadeObjectCompletedEventHandler GetFacadeObjectCompleted;
        
        /// <remarks/>
        public event GetQueryCompletedEventHandler GetQueryCompleted;
        
        /// <remarks/>
        public event GetQuery2CompletedEventHandler GetQuery2Completed;
        
        /// <remarks/>
        public event GetCustomerBalanceCompletedEventHandler GetCustomerBalanceCompleted;
        
        /// <remarks/>
        public event GetCustomerMembershipCompletedEventHandler GetCustomerMembershipCompleted;
        
        /// <remarks/>
        public event GetCustomerByZipCompletedEventHandler GetCustomerByZipCompleted;
        
        /// <remarks/>
        public event GetCustomerByCityStateCompletedEventHandler GetCustomerByCityStateCompleted;
        
        /// <remarks/>
        public event GetCustomerByCityStateMembershipCompletedEventHandler GetCustomerByCityStateMembershipCompleted;
        
        /// <remarks/>
        public event GetCustomerByRadiusCompletedEventHandler GetCustomerByRadiusCompleted;
        
        /// <remarks/>
        public event GetCustomerByRadiusAddressTypeCompletedEventHandler GetCustomerByRadiusAddressTypeCompleted;
        
        /// <remarks/>
        public event GetCustomerByRecordDateCompletedEventHandler GetCustomerByRecordDateCompleted;
        
        /// <remarks/>
        public event GetCustomerByNameCompletedEventHandler GetCustomerByNameCompleted;
        
        /// <remarks/>
        public event GetCustomerDirectoryByNameCompletedEventHandler GetCustomerDirectoryByNameCompleted;
        
        /// <remarks/>
        public event GetCustomerByKeyCompletedEventHandler GetCustomerByKeyCompleted;
        
        /// <remarks/>
        public event GetCustomerByIdCompletedEventHandler GetCustomerByIdCompleted;
        
        /// <remarks/>
        public event GetCustomerByEmailCompletedEventHandler GetCustomerByEmailCompleted;
        
        /// <remarks/>
        public event GetCustomerByWebsiteCompletedEventHandler GetCustomerByWebsiteCompleted;
        
        /// <remarks/>
        public event GetCustomerEventCompletedEventHandler GetCustomerEventCompleted;
        
        /// <remarks/>
        public event GetEventRegistrantByKeyCompletedEventHandler GetEventRegistrantByKeyCompleted;
        
        /// <remarks/>
        public event GetRegistrantsByKeyCompletedEventHandler GetRegistrantsByKeyCompleted;
        
        /// <remarks/>
        public event GetCustomerSessionCompletedEventHandler GetCustomerSessionCompleted;
        
        /// <remarks/>
        public event GetEventListByNameCompletedEventHandler GetEventListByNameCompleted;
        
        /// <remarks/>
        public event GetActiveEventListByNameCompletedEventHandler GetActiveEventListByNameCompleted;
        
        /// <remarks/>
        public event GetActiveEventListByDateCompletedEventHandler GetActiveEventListByDateCompleted;
        
        /// <remarks/>
        public event GetEventByKeyCompletedEventHandler GetEventByKeyCompleted;
        
        /// <remarks/>
        public event GetEventByProductKeyCompletedEventHandler GetEventByProductKeyCompleted;
        
        /// <remarks/>
        public event GetSessionListByNameCompletedEventHandler GetSessionListByNameCompleted;
        
        /// <remarks/>
        public event GetSessionByKeyCompletedEventHandler GetSessionByKeyCompleted;
        
        /// <remarks/>
        public event GetCustomerTicketedSessionsByRegKeyCompletedEventHandler GetCustomerTicketedSessionsByRegKeyCompleted;
        
        /// <remarks/>
        public event GetSessionListByEventCompletedEventHandler GetSessionListByEventCompleted;
        
        /// <remarks/>
        public event GetEventCustomerListCompletedEventHandler GetEventCustomerListCompleted;
        
        /// <remarks/>
        public event GetSessionCustomerListCompletedEventHandler GetSessionCustomerListCompleted;
        
        /// <remarks/>
        public event GetProductBalancesCompletedEventHandler GetProductBalancesCompleted;
        
        /// <remarks/>
        public event CheckEWebUserCompletedEventHandler CheckEWebUserCompleted;
        
        /// <remarks/>
        public event GetCommitteeByKeyCompletedEventHandler GetCommitteeByKeyCompleted;
        
        /// <remarks/>
        public event GetCommitteeByCodeCompletedEventHandler GetCommitteeByCodeCompleted;
        
        /// <remarks/>
        public event GetCommitteeListByCodeCompletedEventHandler GetCommitteeListByCodeCompleted;
        
        /// <remarks/>
        public event GetCommitteeListByCstIdCompletedEventHandler GetCommitteeListByCstIdCompleted;
        
        /// <remarks/>
        public event GetCommitteePatricipationByCstIdCompletedEventHandler GetCommitteePatricipationByCstIdCompleted;
        
        /// <remarks/>
        public event GetActiveProductListCompletedEventHandler GetActiveProductListCompleted;
        
        /// <remarks/>
        public event GetActiveProductListByIndividualCompletedEventHandler GetActiveProductListByIndividualCompleted;
        
        /// <remarks/>
        public event GetPricesByProductKeyCompletedEventHandler GetPricesByProductKeyCompleted;
        
        /// <remarks/>
        public event GetActiveProductListByCustomerCompletedEventHandler GetActiveProductListByCustomerCompleted;
        
        /// <remarks/>
        public event GetActiveSubscriptionByCustomerCompletedEventHandler GetActiveSubscriptionByCustomerCompleted;
        
        /// <remarks/>
        public event GetMembershipProxyListCompletedEventHandler GetMembershipProxyListCompleted;
        
        /// <remarks/>
        public event GetMembershipsByCustomerCompletedEventHandler GetMembershipsByCustomerCompleted;
        
        /// <remarks/>
        public event NewOrganizationInformationCompletedEventHandler NewOrganizationInformationCompleted;
        
        /// <remarks/>
        public event SetOrganizationInformationCompletedEventHandler SetOrganizationInformationCompleted;
        
        /// <remarks/>
        public event NewIndividualInformationCompletedEventHandler NewIndividualInformationCompleted;
        
        /// <remarks/>
        public event SetIndividualInformationCompletedEventHandler SetIndividualInformationCompleted;
        
        /// <remarks/>
        public event AddCustomerRelationshipCompletedEventHandler AddCustomerRelationshipCompleted;
        
        /// <remarks/>
        public event SetCustomerRelationshipCompletedEventHandler SetCustomerRelationshipCompleted;
        
        /// <remarks/>
        public event GetCustomerActivityHistoryCompletedEventHandler GetCustomerActivityHistoryCompleted;
        
        /// <remarks/>
        public event NewHistoricalActivityCompletedEventHandler NewHistoricalActivityCompleted;
        
        /// <remarks/>
        public event SetHistoricalActivityCompletedEventHandler SetHistoricalActivityCompleted;
        
        /// <remarks/>
        public event GetCertificationProductsCompletedEventHandler GetCertificationProductsCompleted;
        
        /// <remarks/>
        public event GetCertificantsCompletedEventHandler GetCertificantsCompleted;
        
        /// <remarks/>
        public event GetCertificationProgramsCompletedEventHandler GetCertificationProgramsCompleted;
        
        /// <remarks/>
        public event GetCertificantsByProgramCompletedEventHandler GetCertificantsByProgramCompleted;
        
        /// <remarks/>
        public event GetPropertyByOwnerCompletedEventHandler GetPropertyByOwnerCompleted;
        
        /// <remarks/>
        public event GetPropertyByCategoryCompletedEventHandler GetPropertyByCategoryCompleted;
        
        /// <remarks/>
        public event GetPropertyCategoriesCompletedEventHandler GetPropertyCategoriesCompleted;
        
        /// <remarks/>
        public event GetPropertyByTypeCompletedEventHandler GetPropertyByTypeCompleted;
        
        /// <remarks/>
        public event GetPropertyTypesCompletedEventHandler GetPropertyTypesCompleted;
        
        /// <remarks/>
        public event GetMultiSelectValuesCompletedEventHandler GetMultiSelectValuesCompleted;
        
        /// <remarks/>
        public event GetAwardEntriesByCustomerCompletedEventHandler GetAwardEntriesByCustomerCompleted;
        
        /// <remarks/>
        public event GetAwardEntriesByAwardCompletedEventHandler GetAwardEntriesByAwardCompleted;
        
        /// <remarks/>
        public event GetAwardJudgesCompletedEventHandler GetAwardJudgesCompleted;
        
        /// <remarks/>
        public event GetLocationByEventCompletedEventHandler GetLocationByEventCompleted;
        
        /// <remarks/>
        public event GetTracksByEventCompletedEventHandler GetTracksByEventCompleted;
        
        /// <remarks/>
        public event GetSessionsByTrackCodeCompletedEventHandler GetSessionsByTrackCodeCompleted;
        
        /// <remarks/>
        public event GetRoomByLocationCompletedEventHandler GetRoomByLocationCompleted;
        
        /// <remarks/>
        public event GetRoomSessionByLocationCompletedEventHandler GetRoomSessionByLocationCompleted;
        
        /// <remarks/>
        public event GetSpeakerInfoBySessionKeyCompletedEventHandler GetSpeakerInfoBySessionKeyCompleted;
        
        /// <remarks/>
        public event GetIndividualChangesByDateCompletedEventHandler GetIndividualChangesByDateCompleted;
        
        /// <remarks/>
        public event GetOrganizationChangesByDateCompletedEventHandler GetOrganizationChangesByDateCompleted;
        
        /// <remarks/>
        public event GetMembershipChangesByDateCompletedEventHandler GetMembershipChangesByDateCompleted;
        
        /// <remarks/>
        public event GetRegistrantChangesByDateCompletedEventHandler GetRegistrantChangesByDateCompleted;
        
        /// <remarks/>
        public event GetCommitteeParticipationChangesByDateCompletedEventHandler GetCommitteeParticipationChangesByDateCompleted;
        
        /// <remarks/>
        public event GetIndividualByDemographicCompletedEventHandler GetIndividualByDemographicCompleted;
        
        /// <remarks/>
        public event GetOrganizationByDemographicCompletedEventHandler GetOrganizationByDemographicCompleted;
        
        /// <remarks/>
        public event GetEventFeesByEventKeyCompletedEventHandler GetEventFeesByEventKeyCompleted;
        
        /// <remarks/>
        public event GetCstKeyFromLicenseNumberCompletedEventHandler GetCstKeyFromLicenseNumberCompleted;
        
        /// <remarks/>
        public event GetCstKeyFromRealtorIdCompletedEventHandler GetCstKeyFromRealtorIdCompleted;
        
        /// <remarks/>
        public event GetCustomerByMembershipTypeCompletedEventHandler GetCustomerByMembershipTypeCompleted;
        
        /// <remarks/>
        public event GetChildOrgsByParentOrgKeyCompletedEventHandler GetChildOrgsByParentOrgKeyCompleted;
        
        /// <remarks/>
        public event GetCustomerRealtorMembershipListCompletedEventHandler GetCustomerRealtorMembershipListCompleted;
        
        /// <remarks/>
        public event GetOrganizationByTypeCompletedEventHandler GetOrganizationByTypeCompleted;
        
        /// <remarks/>
        public event GetEventListByTypeCompletedEventHandler GetEventListByTypeCompleted;
        
        /// <remarks/>
        public event GetProductListByTypeCompletedEventHandler GetProductListByTypeCompleted;
        
        /// <remarks/>
        public event GetIndividualListByOrganizationRelationshipCompletedEventHandler GetIndividualListByOrganizationRelationshipCompleted;
        
        /// <remarks/>
        public event GetIndividualListByChangedDateRelationshipCompletedEventHandler GetIndividualListByChangedDateRelationshipCompleted;
        
        /// <remarks/>
        public event GetRelationshipsByIndividualCompletedEventHandler GetRelationshipsByIndividualCompleted;
        
        /// <remarks/>
        public event GetCustomerCertificationsCompletedEventHandler GetCustomerCertificationsCompleted;
        
        /// <remarks/>
        public event GetIndividualByPrimaryOrganizationCompletedEventHandler GetIndividualByPrimaryOrganizationCompleted;
        
        /// <remarks/>
        public event GetActiveSubscriptionByDateCompletedEventHandler GetActiveSubscriptionByDateCompleted;
        
        /// <remarks/>
        public event UpdateRegistrationBadgePrintDateByRegKeyCompletedEventHandler UpdateRegistrationBadgePrintDateByRegKeyCompleted;
        
        /// <remarks/>
        public event GetOrganizationsByPrimaryIndividualCompletedEventHandler GetOrganizationsByPrimaryIndividualCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/Authenticate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Authenticate(string userName, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password) {
            this.AuthenticateAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        userName,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetFacadeXMLSchema", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFacadeXMLSchema(string szObjectName) {
            object[] results = this.Invoke("GetFacadeXMLSchema", new object[] {
                        szObjectName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacadeXMLSchemaAsync(string szObjectName) {
            this.GetFacadeXMLSchemaAsync(szObjectName, null);
        }
        
        /// <remarks/>
        public void GetFacadeXMLSchemaAsync(string szObjectName, object userState) {
            if ((this.GetFacadeXMLSchemaOperationCompleted == null)) {
                this.GetFacadeXMLSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacadeXMLSchemaOperationCompleted);
            }
            this.InvokeAsync("GetFacadeXMLSchema", new object[] {
                        szObjectName}, this.GetFacadeXMLSchemaOperationCompleted, userState);
        }
        
        private void OnGetFacadeXMLSchemaOperationCompleted(object arg) {
            if ((this.GetFacadeXMLSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacadeXMLSchemaCompleted(this, new GetFacadeXMLSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetFacadeObject", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFacadeObject(string szObjectName, string szObjectKey) {
            object[] results = this.Invoke("GetFacadeObject", new object[] {
                        szObjectName,
                        szObjectKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacadeObjectAsync(string szObjectName, string szObjectKey) {
            this.GetFacadeObjectAsync(szObjectName, szObjectKey, null);
        }
        
        /// <remarks/>
        public void GetFacadeObjectAsync(string szObjectName, string szObjectKey, object userState) {
            if ((this.GetFacadeObjectOperationCompleted == null)) {
                this.GetFacadeObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacadeObjectOperationCompleted);
            }
            this.InvokeAsync("GetFacadeObject", new object[] {
                        szObjectName,
                        szObjectKey}, this.GetFacadeObjectOperationCompleted, userState);
        }
        
        private void OnGetFacadeObjectOperationCompleted(object arg) {
            if ((this.GetFacadeObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacadeObjectCompleted(this, new GetFacadeObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetQuery", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetQuery(string szObjectName, string szColumnList, string szWhereClause, string szOrderBy) {
            object[] results = this.Invoke("GetQuery", new object[] {
                        szObjectName,
                        szColumnList,
                        szWhereClause,
                        szOrderBy});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryAsync(string szObjectName, string szColumnList, string szWhereClause, string szOrderBy) {
            this.GetQueryAsync(szObjectName, szColumnList, szWhereClause, szOrderBy, null);
        }
        
        /// <remarks/>
        public void GetQueryAsync(string szObjectName, string szColumnList, string szWhereClause, string szOrderBy, object userState) {
            if ((this.GetQueryOperationCompleted == null)) {
                this.GetQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryOperationCompleted);
            }
            this.InvokeAsync("GetQuery", new object[] {
                        szObjectName,
                        szColumnList,
                        szWhereClause,
                        szOrderBy}, this.GetQueryOperationCompleted, userState);
        }
        
        private void OnGetQueryOperationCompleted(object arg) {
            if ((this.GetQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryCompleted(this, new GetQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetQuery2", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetQuery2(string szObjectName, string szColumnList, string szWhereClause, string szOrderBy, string szUserKey) {
            object[] results = this.Invoke("GetQuery2", new object[] {
                        szObjectName,
                        szColumnList,
                        szWhereClause,
                        szOrderBy,
                        szUserKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuery2Async(string szObjectName, string szColumnList, string szWhereClause, string szOrderBy, string szUserKey) {
            this.GetQuery2Async(szObjectName, szColumnList, szWhereClause, szOrderBy, szUserKey, null);
        }
        
        /// <remarks/>
        public void GetQuery2Async(string szObjectName, string szColumnList, string szWhereClause, string szOrderBy, string szUserKey, object userState) {
            if ((this.GetQuery2OperationCompleted == null)) {
                this.GetQuery2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuery2OperationCompleted);
            }
            this.InvokeAsync("GetQuery2", new object[] {
                        szObjectName,
                        szColumnList,
                        szWhereClause,
                        szOrderBy,
                        szUserKey}, this.GetQuery2OperationCompleted, userState);
        }
        
        private void OnGetQuery2OperationCompleted(object arg) {
            if ((this.GetQuery2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuery2Completed(this, new GetQuery2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerBalance", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerBalance(string szCstKey) {
            object[] results = this.Invoke("GetCustomerBalance", new object[] {
                        szCstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerBalanceAsync(string szCstKey) {
            this.GetCustomerBalanceAsync(szCstKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerBalanceAsync(string szCstKey, object userState) {
            if ((this.GetCustomerBalanceOperationCompleted == null)) {
                this.GetCustomerBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerBalanceOperationCompleted);
            }
            this.InvokeAsync("GetCustomerBalance", new object[] {
                        szCstKey}, this.GetCustomerBalanceOperationCompleted, userState);
        }
        
        private void OnGetCustomerBalanceOperationCompleted(object arg) {
            if ((this.GetCustomerBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerBalanceCompleted(this, new GetCustomerBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerMembership", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerMembership(string szCstKey) {
            object[] results = this.Invoke("GetCustomerMembership", new object[] {
                        szCstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerMembershipAsync(string szCstKey) {
            this.GetCustomerMembershipAsync(szCstKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerMembershipAsync(string szCstKey, object userState) {
            if ((this.GetCustomerMembershipOperationCompleted == null)) {
                this.GetCustomerMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerMembershipOperationCompleted);
            }
            this.InvokeAsync("GetCustomerMembership", new object[] {
                        szCstKey}, this.GetCustomerMembershipOperationCompleted, userState);
        }
        
        private void OnGetCustomerMembershipOperationCompleted(object arg) {
            if ((this.GetCustomerMembershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerMembershipCompleted(this, new GetCustomerMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByZip", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByZip(string zip1, string zip2, string zip3, string zip4, string zip5, string zip6, string zip7, string zip8, string zip9, bool bIncludeIndividuals, bool bIncludeOrganizations) {
            object[] results = this.Invoke("GetCustomerByZip", new object[] {
                        zip1,
                        zip2,
                        zip3,
                        zip4,
                        zip5,
                        zip6,
                        zip7,
                        zip8,
                        zip9,
                        bIncludeIndividuals,
                        bIncludeOrganizations});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByZipAsync(string zip1, string zip2, string zip3, string zip4, string zip5, string zip6, string zip7, string zip8, string zip9, bool bIncludeIndividuals, bool bIncludeOrganizations) {
            this.GetCustomerByZipAsync(zip1, zip2, zip3, zip4, zip5, zip6, zip7, zip8, zip9, bIncludeIndividuals, bIncludeOrganizations, null);
        }
        
        /// <remarks/>
        public void GetCustomerByZipAsync(string zip1, string zip2, string zip3, string zip4, string zip5, string zip6, string zip7, string zip8, string zip9, bool bIncludeIndividuals, bool bIncludeOrganizations, object userState) {
            if ((this.GetCustomerByZipOperationCompleted == null)) {
                this.GetCustomerByZipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByZipOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByZip", new object[] {
                        zip1,
                        zip2,
                        zip3,
                        zip4,
                        zip5,
                        zip6,
                        zip7,
                        zip8,
                        zip9,
                        bIncludeIndividuals,
                        bIncludeOrganizations}, this.GetCustomerByZipOperationCompleted, userState);
        }
        
        private void OnGetCustomerByZipOperationCompleted(object arg) {
            if ((this.GetCustomerByZipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByZipCompleted(this, new GetCustomerByZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByCityState", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByCityState(string szState, string szCity, bool bIncludeIndividuals, bool bIncludeOrganizations, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerByCityState", new object[] {
                        szState,
                        szCity,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByCityStateAsync(string szState, string szCity, bool bIncludeIndividuals, bool bIncludeOrganizations, string szRecordDate) {
            this.GetCustomerByCityStateAsync(szState, szCity, bIncludeIndividuals, bIncludeOrganizations, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerByCityStateAsync(string szState, string szCity, bool bIncludeIndividuals, bool bIncludeOrganizations, string szRecordDate, object userState) {
            if ((this.GetCustomerByCityStateOperationCompleted == null)) {
                this.GetCustomerByCityStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByCityStateOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByCityState", new object[] {
                        szState,
                        szCity,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        szRecordDate}, this.GetCustomerByCityStateOperationCompleted, userState);
        }
        
        private void OnGetCustomerByCityStateOperationCompleted(object arg) {
            if ((this.GetCustomerByCityStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByCityStateCompleted(this, new GetCustomerByCityStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByCityStateMembership", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByCityStateMembership(string szState, string szCity, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerByCityStateMembership", new object[] {
                        szState,
                        szCity,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByCityStateMembershipAsync(string szState, string szCity, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, string szRecordDate) {
            this.GetCustomerByCityStateMembershipAsync(szState, szCity, bIncludeIndividuals, bIncludeOrganizations, bMembersOnly, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerByCityStateMembershipAsync(string szState, string szCity, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, string szRecordDate, object userState) {
            if ((this.GetCustomerByCityStateMembershipOperationCompleted == null)) {
                this.GetCustomerByCityStateMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByCityStateMembershipOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByCityStateMembership", new object[] {
                        szState,
                        szCity,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly,
                        szRecordDate}, this.GetCustomerByCityStateMembershipOperationCompleted, userState);
        }
        
        private void OnGetCustomerByCityStateMembershipOperationCompleted(object arg) {
            if ((this.GetCustomerByCityStateMembershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByCityStateMembershipCompleted(this, new GetCustomerByCityStateMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByRadius", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByRadius(string szAddressLine1, string szAddressLine2, string szCity, string szState, string szZip, int iRadius, bool bIncludeIndividual, bool bIncludeOrganization, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerByRadius", new object[] {
                        szAddressLine1,
                        szAddressLine2,
                        szCity,
                        szState,
                        szZip,
                        iRadius,
                        bIncludeIndividual,
                        bIncludeOrganization,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByRadiusAsync(string szAddressLine1, string szAddressLine2, string szCity, string szState, string szZip, int iRadius, bool bIncludeIndividual, bool bIncludeOrganization, string szRecordDate) {
            this.GetCustomerByRadiusAsync(szAddressLine1, szAddressLine2, szCity, szState, szZip, iRadius, bIncludeIndividual, bIncludeOrganization, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerByRadiusAsync(string szAddressLine1, string szAddressLine2, string szCity, string szState, string szZip, int iRadius, bool bIncludeIndividual, bool bIncludeOrganization, string szRecordDate, object userState) {
            if ((this.GetCustomerByRadiusOperationCompleted == null)) {
                this.GetCustomerByRadiusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByRadiusOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByRadius", new object[] {
                        szAddressLine1,
                        szAddressLine2,
                        szCity,
                        szState,
                        szZip,
                        iRadius,
                        bIncludeIndividual,
                        bIncludeOrganization,
                        szRecordDate}, this.GetCustomerByRadiusOperationCompleted, userState);
        }
        
        private void OnGetCustomerByRadiusOperationCompleted(object arg) {
            if ((this.GetCustomerByRadiusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByRadiusCompleted(this, new GetCustomerByRadiusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByRadiusAddressType", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByRadiusAddressType(string szAddressLine1, string szAddressLine2, string szCity, string szState, string szZip, int iRadius, bool bIncludeIndividual, bool bIncludeOrganization, bool bMembersOnly, string AddressType, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerByRadiusAddressType", new object[] {
                        szAddressLine1,
                        szAddressLine2,
                        szCity,
                        szState,
                        szZip,
                        iRadius,
                        bIncludeIndividual,
                        bIncludeOrganization,
                        bMembersOnly,
                        AddressType,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByRadiusAddressTypeAsync(string szAddressLine1, string szAddressLine2, string szCity, string szState, string szZip, int iRadius, bool bIncludeIndividual, bool bIncludeOrganization, bool bMembersOnly, string AddressType, string szRecordDate) {
            this.GetCustomerByRadiusAddressTypeAsync(szAddressLine1, szAddressLine2, szCity, szState, szZip, iRadius, bIncludeIndividual, bIncludeOrganization, bMembersOnly, AddressType, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerByRadiusAddressTypeAsync(string szAddressLine1, string szAddressLine2, string szCity, string szState, string szZip, int iRadius, bool bIncludeIndividual, bool bIncludeOrganization, bool bMembersOnly, string AddressType, string szRecordDate, object userState) {
            if ((this.GetCustomerByRadiusAddressTypeOperationCompleted == null)) {
                this.GetCustomerByRadiusAddressTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByRadiusAddressTypeOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByRadiusAddressType", new object[] {
                        szAddressLine1,
                        szAddressLine2,
                        szCity,
                        szState,
                        szZip,
                        iRadius,
                        bIncludeIndividual,
                        bIncludeOrganization,
                        bMembersOnly,
                        AddressType,
                        szRecordDate}, this.GetCustomerByRadiusAddressTypeOperationCompleted, userState);
        }
        
        private void OnGetCustomerByRadiusAddressTypeOperationCompleted(object arg) {
            if ((this.GetCustomerByRadiusAddressTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByRadiusAddressTypeCompleted(this, new GetCustomerByRadiusAddressTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByRecordDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByRecordDate(bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerByRecordDate", new object[] {
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByRecordDateAsync(bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, string szRecordDate) {
            this.GetCustomerByRecordDateAsync(bIncludeIndividuals, bIncludeOrganizations, bMembersOnly, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerByRecordDateAsync(bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, string szRecordDate, object userState) {
            if ((this.GetCustomerByRecordDateOperationCompleted == null)) {
                this.GetCustomerByRecordDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByRecordDateOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByRecordDate", new object[] {
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly,
                        szRecordDate}, this.GetCustomerByRecordDateOperationCompleted, userState);
        }
        
        private void OnGetCustomerByRecordDateOperationCompleted(object arg) {
            if ((this.GetCustomerByRecordDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByRecordDateCompleted(this, new GetCustomerByRecordDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByName", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByName(string szName) {
            object[] results = this.Invoke("GetCustomerByName", new object[] {
                        szName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByNameAsync(string szName) {
            this.GetCustomerByNameAsync(szName, null);
        }
        
        /// <remarks/>
        public void GetCustomerByNameAsync(string szName, object userState) {
            if ((this.GetCustomerByNameOperationCompleted == null)) {
                this.GetCustomerByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByName", new object[] {
                        szName}, this.GetCustomerByNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerByNameOperationCompleted(object arg) {
            if ((this.GetCustomerByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByNameCompleted(this, new GetCustomerByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerDirectoryByName", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerDirectoryByName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szName, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly) {
            object[] results = this.Invoke("GetCustomerDirectoryByName", new object[] {
                        szName,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerDirectoryByNameAsync(string szName, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly) {
            this.GetCustomerDirectoryByNameAsync(szName, bIncludeIndividuals, bIncludeOrganizations, bMembersOnly, null);
        }
        
        /// <remarks/>
        public void GetCustomerDirectoryByNameAsync(string szName, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, object userState) {
            if ((this.GetCustomerDirectoryByNameOperationCompleted == null)) {
                this.GetCustomerDirectoryByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerDirectoryByNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerDirectoryByName", new object[] {
                        szName,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly}, this.GetCustomerDirectoryByNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerDirectoryByNameOperationCompleted(object arg) {
            if ((this.GetCustomerDirectoryByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerDirectoryByNameCompleted(this, new GetCustomerDirectoryByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByKey(string szCstKey) {
            object[] results = this.Invoke("GetCustomerByKey", new object[] {
                        szCstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByKeyAsync(string szCstKey) {
            this.GetCustomerByKeyAsync(szCstKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerByKeyAsync(string szCstKey, object userState) {
            if ((this.GetCustomerByKeyOperationCompleted == null)) {
                this.GetCustomerByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByKeyOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByKey", new object[] {
                        szCstKey}, this.GetCustomerByKeyOperationCompleted, userState);
        }
        
        private void OnGetCustomerByKeyOperationCompleted(object arg) {
            if ((this.GetCustomerByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByKeyCompleted(this, new GetCustomerByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerById", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerById(string szCstId) {
            object[] results = this.Invoke("GetCustomerById", new object[] {
                        szCstId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByIdAsync(string szCstId) {
            this.GetCustomerByIdAsync(szCstId, null);
        }
        
        /// <remarks/>
        public void GetCustomerByIdAsync(string szCstId, object userState) {
            if ((this.GetCustomerByIdOperationCompleted == null)) {
                this.GetCustomerByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByIdOperationCompleted);
            }
            this.InvokeAsync("GetCustomerById", new object[] {
                        szCstId}, this.GetCustomerByIdOperationCompleted, userState);
        }
        
        private void OnGetCustomerByIdOperationCompleted(object arg) {
            if ((this.GetCustomerByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByIdCompleted(this, new GetCustomerByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByEmail", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByEmail(string szEmailAddress) {
            object[] results = this.Invoke("GetCustomerByEmail", new object[] {
                        szEmailAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByEmailAsync(string szEmailAddress) {
            this.GetCustomerByEmailAsync(szEmailAddress, null);
        }
        
        /// <remarks/>
        public void GetCustomerByEmailAsync(string szEmailAddress, object userState) {
            if ((this.GetCustomerByEmailOperationCompleted == null)) {
                this.GetCustomerByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByEmailOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByEmail", new object[] {
                        szEmailAddress}, this.GetCustomerByEmailOperationCompleted, userState);
        }
        
        private void OnGetCustomerByEmailOperationCompleted(object arg) {
            if ((this.GetCustomerByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByEmailCompleted(this, new GetCustomerByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByWebsite", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByWebsite([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szWebsite, string szIncludeCustomersWithName, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly) {
            object[] results = this.Invoke("GetCustomerByWebsite", new object[] {
                        szWebsite,
                        szIncludeCustomersWithName,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByWebsiteAsync(string szWebsite, string szIncludeCustomersWithName, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly) {
            this.GetCustomerByWebsiteAsync(szWebsite, szIncludeCustomersWithName, bIncludeIndividuals, bIncludeOrganizations, bMembersOnly, null);
        }
        
        /// <remarks/>
        public void GetCustomerByWebsiteAsync(string szWebsite, string szIncludeCustomersWithName, bool bIncludeIndividuals, bool bIncludeOrganizations, bool bMembersOnly, object userState) {
            if ((this.GetCustomerByWebsiteOperationCompleted == null)) {
                this.GetCustomerByWebsiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByWebsiteOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByWebsite", new object[] {
                        szWebsite,
                        szIncludeCustomersWithName,
                        bIncludeIndividuals,
                        bIncludeOrganizations,
                        bMembersOnly}, this.GetCustomerByWebsiteOperationCompleted, userState);
        }
        
        private void OnGetCustomerByWebsiteOperationCompleted(object arg) {
            if ((this.GetCustomerByWebsiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByWebsiteCompleted(this, new GetCustomerByWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerEvent", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerEvent(string szCstKey, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerEvent", new object[] {
                        szCstKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerEventAsync(string szCstKey, string szRecordDate) {
            this.GetCustomerEventAsync(szCstKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerEventAsync(string szCstKey, string szRecordDate, object userState) {
            if ((this.GetCustomerEventOperationCompleted == null)) {
                this.GetCustomerEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerEventOperationCompleted);
            }
            this.InvokeAsync("GetCustomerEvent", new object[] {
                        szCstKey,
                        szRecordDate}, this.GetCustomerEventOperationCompleted, userState);
        }
        
        private void OnGetCustomerEventOperationCompleted(object arg) {
            if ((this.GetCustomerEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerEventCompleted(this, new GetCustomerEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventRegistrantByKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEventRegistrantByKey(string regKey) {
            object[] results = this.Invoke("GetEventRegistrantByKey", new object[] {
                        regKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventRegistrantByKeyAsync(string regKey) {
            this.GetEventRegistrantByKeyAsync(regKey, null);
        }
        
        /// <remarks/>
        public void GetEventRegistrantByKeyAsync(string regKey, object userState) {
            if ((this.GetEventRegistrantByKeyOperationCompleted == null)) {
                this.GetEventRegistrantByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventRegistrantByKeyOperationCompleted);
            }
            this.InvokeAsync("GetEventRegistrantByKey", new object[] {
                        regKey}, this.GetEventRegistrantByKeyOperationCompleted, userState);
        }
        
        private void OnGetEventRegistrantByKeyOperationCompleted(object arg) {
            if ((this.GetEventRegistrantByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventRegistrantByKeyCompleted(this, new GetEventRegistrantByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetRegistrantsByKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRegistrantsByKey(string eventkey, string firstname, string lastname, string orgname, string regid) {
            object[] results = this.Invoke("GetRegistrantsByKey", new object[] {
                        eventkey,
                        firstname,
                        lastname,
                        orgname,
                        regid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegistrantsByKeyAsync(string eventkey, string firstname, string lastname, string orgname, string regid) {
            this.GetRegistrantsByKeyAsync(eventkey, firstname, lastname, orgname, regid, null);
        }
        
        /// <remarks/>
        public void GetRegistrantsByKeyAsync(string eventkey, string firstname, string lastname, string orgname, string regid, object userState) {
            if ((this.GetRegistrantsByKeyOperationCompleted == null)) {
                this.GetRegistrantsByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegistrantsByKeyOperationCompleted);
            }
            this.InvokeAsync("GetRegistrantsByKey", new object[] {
                        eventkey,
                        firstname,
                        lastname,
                        orgname,
                        regid}, this.GetRegistrantsByKeyOperationCompleted, userState);
        }
        
        private void OnGetRegistrantsByKeyOperationCompleted(object arg) {
            if ((this.GetRegistrantsByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegistrantsByKeyCompleted(this, new GetRegistrantsByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerSession", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerSession(string szCstKey, string szRecordDate) {
            object[] results = this.Invoke("GetCustomerSession", new object[] {
                        szCstKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSessionAsync(string szCstKey, string szRecordDate) {
            this.GetCustomerSessionAsync(szCstKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerSessionAsync(string szCstKey, string szRecordDate, object userState) {
            if ((this.GetCustomerSessionOperationCompleted == null)) {
                this.GetCustomerSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSessionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSession", new object[] {
                        szCstKey,
                        szRecordDate}, this.GetCustomerSessionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSessionOperationCompleted(object arg) {
            if ((this.GetCustomerSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSessionCompleted(this, new GetCustomerSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventListByName", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEventListByName(string szName, string szRecordDate) {
            object[] results = this.Invoke("GetEventListByName", new object[] {
                        szName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventListByNameAsync(string szName, string szRecordDate) {
            this.GetEventListByNameAsync(szName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetEventListByNameAsync(string szName, string szRecordDate, object userState) {
            if ((this.GetEventListByNameOperationCompleted == null)) {
                this.GetEventListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventListByNameOperationCompleted);
            }
            this.InvokeAsync("GetEventListByName", new object[] {
                        szName,
                        szRecordDate}, this.GetEventListByNameOperationCompleted, userState);
        }
        
        private void OnGetEventListByNameOperationCompleted(object arg) {
            if ((this.GetEventListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventListByNameCompleted(this, new GetEventListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveEventListByName", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveEventListByName(string szName, string szRecordDate) {
            object[] results = this.Invoke("GetActiveEventListByName", new object[] {
                        szName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveEventListByNameAsync(string szName, string szRecordDate) {
            this.GetActiveEventListByNameAsync(szName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetActiveEventListByNameAsync(string szName, string szRecordDate, object userState) {
            if ((this.GetActiveEventListByNameOperationCompleted == null)) {
                this.GetActiveEventListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveEventListByNameOperationCompleted);
            }
            this.InvokeAsync("GetActiveEventListByName", new object[] {
                        szName,
                        szRecordDate}, this.GetActiveEventListByNameOperationCompleted, userState);
        }
        
        private void OnGetActiveEventListByNameOperationCompleted(object arg) {
            if ((this.GetActiveEventListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveEventListByNameCompleted(this, new GetActiveEventListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveEventListByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveEventListByDate(string EventStartDate, string EventEndDate, bool bActiveOnly, string szRecordDate) {
            object[] results = this.Invoke("GetActiveEventListByDate", new object[] {
                        EventStartDate,
                        EventEndDate,
                        bActiveOnly,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveEventListByDateAsync(string EventStartDate, string EventEndDate, bool bActiveOnly, string szRecordDate) {
            this.GetActiveEventListByDateAsync(EventStartDate, EventEndDate, bActiveOnly, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetActiveEventListByDateAsync(string EventStartDate, string EventEndDate, bool bActiveOnly, string szRecordDate, object userState) {
            if ((this.GetActiveEventListByDateOperationCompleted == null)) {
                this.GetActiveEventListByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveEventListByDateOperationCompleted);
            }
            this.InvokeAsync("GetActiveEventListByDate", new object[] {
                        EventStartDate,
                        EventEndDate,
                        bActiveOnly,
                        szRecordDate}, this.GetActiveEventListByDateOperationCompleted, userState);
        }
        
        private void OnGetActiveEventListByDateOperationCompleted(object arg) {
            if ((this.GetActiveEventListByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveEventListByDateCompleted(this, new GetActiveEventListByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventListByKey", RequestElementName="GetEventListByKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseElementName="GetEventListByKeyResponse", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetEventListByKeyResult")]
        public System.Xml.XmlNode GetEventByKey(string szKey) {
            object[] results = this.Invoke("GetEventByKey", new object[] {
                        szKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventByKeyAsync(string szKey) {
            this.GetEventByKeyAsync(szKey, null);
        }
        
        /// <remarks/>
        public void GetEventByKeyAsync(string szKey, object userState) {
            if ((this.GetEventByKeyOperationCompleted == null)) {
                this.GetEventByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventByKeyOperationCompleted);
            }
            this.InvokeAsync("GetEventByKey", new object[] {
                        szKey}, this.GetEventByKeyOperationCompleted, userState);
        }
        
        private void OnGetEventByKeyOperationCompleted(object arg) {
            if ((this.GetEventByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventByKeyCompleted(this, new GetEventByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventByProductKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEventByProductKey(string szKey) {
            object[] results = this.Invoke("GetEventByProductKey", new object[] {
                        szKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventByProductKeyAsync(string szKey) {
            this.GetEventByProductKeyAsync(szKey, null);
        }
        
        /// <remarks/>
        public void GetEventByProductKeyAsync(string szKey, object userState) {
            if ((this.GetEventByProductKeyOperationCompleted == null)) {
                this.GetEventByProductKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventByProductKeyOperationCompleted);
            }
            this.InvokeAsync("GetEventByProductKey", new object[] {
                        szKey}, this.GetEventByProductKeyOperationCompleted, userState);
        }
        
        private void OnGetEventByProductKeyOperationCompleted(object arg) {
            if ((this.GetEventByProductKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventByProductKeyCompleted(this, new GetEventByProductKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetSessionListByName", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSessionListByName(string szName, string szRecordDate) {
            object[] results = this.Invoke("GetSessionListByName", new object[] {
                        szName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionListByNameAsync(string szName, string szRecordDate) {
            this.GetSessionListByNameAsync(szName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetSessionListByNameAsync(string szName, string szRecordDate, object userState) {
            if ((this.GetSessionListByNameOperationCompleted == null)) {
                this.GetSessionListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionListByNameOperationCompleted);
            }
            this.InvokeAsync("GetSessionListByName", new object[] {
                        szName,
                        szRecordDate}, this.GetSessionListByNameOperationCompleted, userState);
        }
        
        private void OnGetSessionListByNameOperationCompleted(object arg) {
            if ((this.GetSessionListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionListByNameCompleted(this, new GetSessionListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetSessionByKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSessionByKey(string szKey) {
            object[] results = this.Invoke("GetSessionByKey", new object[] {
                        szKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionByKeyAsync(string szKey) {
            this.GetSessionByKeyAsync(szKey, null);
        }
        
        /// <remarks/>
        public void GetSessionByKeyAsync(string szKey, object userState) {
            if ((this.GetSessionByKeyOperationCompleted == null)) {
                this.GetSessionByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionByKeyOperationCompleted);
            }
            this.InvokeAsync("GetSessionByKey", new object[] {
                        szKey}, this.GetSessionByKeyOperationCompleted, userState);
        }
        
        private void OnGetSessionByKeyOperationCompleted(object arg) {
            if ((this.GetSessionByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionByKeyCompleted(this, new GetSessionByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerTicketedSessionsByRegKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerTicketedSessionsByRegKey(string szKey) {
            object[] results = this.Invoke("GetCustomerTicketedSessionsByRegKey", new object[] {
                        szKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerTicketedSessionsByRegKeyAsync(string szKey) {
            this.GetCustomerTicketedSessionsByRegKeyAsync(szKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerTicketedSessionsByRegKeyAsync(string szKey, object userState) {
            if ((this.GetCustomerTicketedSessionsByRegKeyOperationCompleted == null)) {
                this.GetCustomerTicketedSessionsByRegKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerTicketedSessionsByRegKeyOperationCompleted);
            }
            this.InvokeAsync("GetCustomerTicketedSessionsByRegKey", new object[] {
                        szKey}, this.GetCustomerTicketedSessionsByRegKeyOperationCompleted, userState);
        }
        
        private void OnGetCustomerTicketedSessionsByRegKeyOperationCompleted(object arg) {
            if ((this.GetCustomerTicketedSessionsByRegKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerTicketedSessionsByRegKeyCompleted(this, new GetCustomerTicketedSessionsByRegKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetSessionListByEvent", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSessionListByEvent(string szEventKey, string szRecordDate) {
            object[] results = this.Invoke("GetSessionListByEvent", new object[] {
                        szEventKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionListByEventAsync(string szEventKey, string szRecordDate) {
            this.GetSessionListByEventAsync(szEventKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetSessionListByEventAsync(string szEventKey, string szRecordDate, object userState) {
            if ((this.GetSessionListByEventOperationCompleted == null)) {
                this.GetSessionListByEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionListByEventOperationCompleted);
            }
            this.InvokeAsync("GetSessionListByEvent", new object[] {
                        szEventKey,
                        szRecordDate}, this.GetSessionListByEventOperationCompleted, userState);
        }
        
        private void OnGetSessionListByEventOperationCompleted(object arg) {
            if ((this.GetSessionListByEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionListByEventCompleted(this, new GetSessionListByEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventCustomerList", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEventCustomerList(string szEventKey, string szRecordDate) {
            object[] results = this.Invoke("GetEventCustomerList", new object[] {
                        szEventKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventCustomerListAsync(string szEventKey, string szRecordDate) {
            this.GetEventCustomerListAsync(szEventKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetEventCustomerListAsync(string szEventKey, string szRecordDate, object userState) {
            if ((this.GetEventCustomerListOperationCompleted == null)) {
                this.GetEventCustomerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventCustomerListOperationCompleted);
            }
            this.InvokeAsync("GetEventCustomerList", new object[] {
                        szEventKey,
                        szRecordDate}, this.GetEventCustomerListOperationCompleted, userState);
        }
        
        private void OnGetEventCustomerListOperationCompleted(object arg) {
            if ((this.GetEventCustomerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventCustomerListCompleted(this, new GetEventCustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetSessionCustomerList", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSessionCustomerList(string szSessionKey, string szRecordDate) {
            object[] results = this.Invoke("GetSessionCustomerList", new object[] {
                        szSessionKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionCustomerListAsync(string szSessionKey, string szRecordDate) {
            this.GetSessionCustomerListAsync(szSessionKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetSessionCustomerListAsync(string szSessionKey, string szRecordDate, object userState) {
            if ((this.GetSessionCustomerListOperationCompleted == null)) {
                this.GetSessionCustomerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionCustomerListOperationCompleted);
            }
            this.InvokeAsync("GetSessionCustomerList", new object[] {
                        szSessionKey,
                        szRecordDate}, this.GetSessionCustomerListOperationCompleted, userState);
        }
        
        private void OnGetSessionCustomerListOperationCompleted(object arg) {
            if ((this.GetSessionCustomerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionCustomerListCompleted(this, new GetSessionCustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetProductBalances", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProductBalances(string szCstKey, string szPrdKey, string szRecordDate) {
            object[] results = this.Invoke("GetProductBalances", new object[] {
                        szCstKey,
                        szPrdKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductBalancesAsync(string szCstKey, string szPrdKey, string szRecordDate) {
            this.GetProductBalancesAsync(szCstKey, szPrdKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetProductBalancesAsync(string szCstKey, string szPrdKey, string szRecordDate, object userState) {
            if ((this.GetProductBalancesOperationCompleted == null)) {
                this.GetProductBalancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductBalancesOperationCompleted);
            }
            this.InvokeAsync("GetProductBalances", new object[] {
                        szCstKey,
                        szPrdKey,
                        szRecordDate}, this.GetProductBalancesOperationCompleted, userState);
        }
        
        private void OnGetProductBalancesOperationCompleted(object arg) {
            if ((this.GetProductBalancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductBalancesCompleted(this, new GetProductBalancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/CheckEWebUser", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CheckEWebUser(string szEmail, string szPassword) {
            object[] results = this.Invoke("CheckEWebUser", new object[] {
                        szEmail,
                        szPassword});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEWebUserAsync(string szEmail, string szPassword) {
            this.CheckEWebUserAsync(szEmail, szPassword, null);
        }
        
        /// <remarks/>
        public void CheckEWebUserAsync(string szEmail, string szPassword, object userState) {
            if ((this.CheckEWebUserOperationCompleted == null)) {
                this.CheckEWebUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEWebUserOperationCompleted);
            }
            this.InvokeAsync("CheckEWebUser", new object[] {
                        szEmail,
                        szPassword}, this.CheckEWebUserOperationCompleted, userState);
        }
        
        private void OnCheckEWebUserOperationCompleted(object arg) {
            if ((this.CheckEWebUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEWebUserCompleted(this, new CheckEWebUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCommitteeByKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCommitteeByKey(string szKey) {
            object[] results = this.Invoke("GetCommitteeByKey", new object[] {
                        szKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitteeByKeyAsync(string szKey) {
            this.GetCommitteeByKeyAsync(szKey, null);
        }
        
        /// <remarks/>
        public void GetCommitteeByKeyAsync(string szKey, object userState) {
            if ((this.GetCommitteeByKeyOperationCompleted == null)) {
                this.GetCommitteeByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitteeByKeyOperationCompleted);
            }
            this.InvokeAsync("GetCommitteeByKey", new object[] {
                        szKey}, this.GetCommitteeByKeyOperationCompleted, userState);
        }
        
        private void OnGetCommitteeByKeyOperationCompleted(object arg) {
            if ((this.GetCommitteeByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitteeByKeyCompleted(this, new GetCommitteeByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCommitteeByCode", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCommitteeByCode(string szCode) {
            object[] results = this.Invoke("GetCommitteeByCode", new object[] {
                        szCode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitteeByCodeAsync(string szCode) {
            this.GetCommitteeByCodeAsync(szCode, null);
        }
        
        /// <remarks/>
        public void GetCommitteeByCodeAsync(string szCode, object userState) {
            if ((this.GetCommitteeByCodeOperationCompleted == null)) {
                this.GetCommitteeByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitteeByCodeOperationCompleted);
            }
            this.InvokeAsync("GetCommitteeByCode", new object[] {
                        szCode}, this.GetCommitteeByCodeOperationCompleted, userState);
        }
        
        private void OnGetCommitteeByCodeOperationCompleted(object arg) {
            if ((this.GetCommitteeByCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitteeByCodeCompleted(this, new GetCommitteeByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCommitteeListByCode", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCommitteeListByCode(string szCode, string szActiveInactiveType, string szRecordDate) {
            object[] results = this.Invoke("GetCommitteeListByCode", new object[] {
                        szCode,
                        szActiveInactiveType,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitteeListByCodeAsync(string szCode, string szActiveInactiveType, string szRecordDate) {
            this.GetCommitteeListByCodeAsync(szCode, szActiveInactiveType, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCommitteeListByCodeAsync(string szCode, string szActiveInactiveType, string szRecordDate, object userState) {
            if ((this.GetCommitteeListByCodeOperationCompleted == null)) {
                this.GetCommitteeListByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitteeListByCodeOperationCompleted);
            }
            this.InvokeAsync("GetCommitteeListByCode", new object[] {
                        szCode,
                        szActiveInactiveType,
                        szRecordDate}, this.GetCommitteeListByCodeOperationCompleted, userState);
        }
        
        private void OnGetCommitteeListByCodeOperationCompleted(object arg) {
            if ((this.GetCommitteeListByCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitteeListByCodeCompleted(this, new GetCommitteeListByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCommitteeListByCstId", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCommitteeListByCstId(string szCstId) {
            object[] results = this.Invoke("GetCommitteeListByCstId", new object[] {
                        szCstId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitteeListByCstIdAsync(string szCstId) {
            this.GetCommitteeListByCstIdAsync(szCstId, null);
        }
        
        /// <remarks/>
        public void GetCommitteeListByCstIdAsync(string szCstId, object userState) {
            if ((this.GetCommitteeListByCstIdOperationCompleted == null)) {
                this.GetCommitteeListByCstIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitteeListByCstIdOperationCompleted);
            }
            this.InvokeAsync("GetCommitteeListByCstId", new object[] {
                        szCstId}, this.GetCommitteeListByCstIdOperationCompleted, userState);
        }
        
        private void OnGetCommitteeListByCstIdOperationCompleted(object arg) {
            if ((this.GetCommitteeListByCstIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitteeListByCstIdCompleted(this, new GetCommitteeListByCstIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCommitteeParticipationByCstId", RequestElementName="GetCommitteeParticipationByCstId", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseElementName="GetCommitteeParticipationByCstIdResponse", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetCommitteeParticipationByCstIdResult")]
        public System.Xml.XmlNode GetCommitteePatricipationByCstId(string szCstId) {
            object[] results = this.Invoke("GetCommitteePatricipationByCstId", new object[] {
                        szCstId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitteePatricipationByCstIdAsync(string szCstId) {
            this.GetCommitteePatricipationByCstIdAsync(szCstId, null);
        }
        
        /// <remarks/>
        public void GetCommitteePatricipationByCstIdAsync(string szCstId, object userState) {
            if ((this.GetCommitteePatricipationByCstIdOperationCompleted == null)) {
                this.GetCommitteePatricipationByCstIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitteePatricipationByCstIdOperationCompleted);
            }
            this.InvokeAsync("GetCommitteePatricipationByCstId", new object[] {
                        szCstId}, this.GetCommitteePatricipationByCstIdOperationCompleted, userState);
        }
        
        private void OnGetCommitteePatricipationByCstIdOperationCompleted(object arg) {
            if ((this.GetCommitteePatricipationByCstIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitteePatricipationByCstIdCompleted(this, new GetCommitteePatricipationByCstIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveProductList", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveProductList(string szRecordDate) {
            object[] results = this.Invoke("GetActiveProductList", new object[] {
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveProductListAsync(string szRecordDate) {
            this.GetActiveProductListAsync(szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetActiveProductListAsync(string szRecordDate, object userState) {
            if ((this.GetActiveProductListOperationCompleted == null)) {
                this.GetActiveProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveProductListOperationCompleted);
            }
            this.InvokeAsync("GetActiveProductList", new object[] {
                        szRecordDate}, this.GetActiveProductListOperationCompleted, userState);
        }
        
        private void OnGetActiveProductListOperationCompleted(object arg) {
            if ((this.GetActiveProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveProductListCompleted(this, new GetActiveProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveProductListByIndividual", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveProductListByIndividual(string cstid, string szRecordDate) {
            object[] results = this.Invoke("GetActiveProductListByIndividual", new object[] {
                        cstid,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveProductListByIndividualAsync(string cstid, string szRecordDate) {
            this.GetActiveProductListByIndividualAsync(cstid, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetActiveProductListByIndividualAsync(string cstid, string szRecordDate, object userState) {
            if ((this.GetActiveProductListByIndividualOperationCompleted == null)) {
                this.GetActiveProductListByIndividualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveProductListByIndividualOperationCompleted);
            }
            this.InvokeAsync("GetActiveProductListByIndividual", new object[] {
                        cstid,
                        szRecordDate}, this.GetActiveProductListByIndividualOperationCompleted, userState);
        }
        
        private void OnGetActiveProductListByIndividualOperationCompleted(object arg) {
            if ((this.GetActiveProductListByIndividualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveProductListByIndividualCompleted(this, new GetActiveProductListByIndividualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetPricesByProductKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPricesByProductKey(string prdkey) {
            object[] results = this.Invoke("GetPricesByProductKey", new object[] {
                        prdkey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPricesByProductKeyAsync(string prdkey) {
            this.GetPricesByProductKeyAsync(prdkey, null);
        }
        
        /// <remarks/>
        public void GetPricesByProductKeyAsync(string prdkey, object userState) {
            if ((this.GetPricesByProductKeyOperationCompleted == null)) {
                this.GetPricesByProductKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPricesByProductKeyOperationCompleted);
            }
            this.InvokeAsync("GetPricesByProductKey", new object[] {
                        prdkey}, this.GetPricesByProductKeyOperationCompleted, userState);
        }
        
        private void OnGetPricesByProductKeyOperationCompleted(object arg) {
            if ((this.GetPricesByProductKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPricesByProductKeyCompleted(this, new GetPricesByProductKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveProductListByCustomer", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveProductListByCustomer(string cstkey, string szRecordDate) {
            object[] results = this.Invoke("GetActiveProductListByCustomer", new object[] {
                        cstkey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveProductListByCustomerAsync(string cstkey, string szRecordDate) {
            this.GetActiveProductListByCustomerAsync(cstkey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetActiveProductListByCustomerAsync(string cstkey, string szRecordDate, object userState) {
            if ((this.GetActiveProductListByCustomerOperationCompleted == null)) {
                this.GetActiveProductListByCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveProductListByCustomerOperationCompleted);
            }
            this.InvokeAsync("GetActiveProductListByCustomer", new object[] {
                        cstkey,
                        szRecordDate}, this.GetActiveProductListByCustomerOperationCompleted, userState);
        }
        
        private void OnGetActiveProductListByCustomerOperationCompleted(object arg) {
            if ((this.GetActiveProductListByCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveProductListByCustomerCompleted(this, new GetActiveProductListByCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveSubscriptionByCustomer", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveSubscriptionByCustomer(string cstid, string szRecordDate) {
            object[] results = this.Invoke("GetActiveSubscriptionByCustomer", new object[] {
                        cstid,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveSubscriptionByCustomerAsync(string cstid, string szRecordDate) {
            this.GetActiveSubscriptionByCustomerAsync(cstid, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetActiveSubscriptionByCustomerAsync(string cstid, string szRecordDate, object userState) {
            if ((this.GetActiveSubscriptionByCustomerOperationCompleted == null)) {
                this.GetActiveSubscriptionByCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveSubscriptionByCustomerOperationCompleted);
            }
            this.InvokeAsync("GetActiveSubscriptionByCustomer", new object[] {
                        cstid,
                        szRecordDate}, this.GetActiveSubscriptionByCustomerOperationCompleted, userState);
        }
        
        private void OnGetActiveSubscriptionByCustomerOperationCompleted(object arg) {
            if ((this.GetActiveSubscriptionByCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveSubscriptionByCustomerCompleted(this, new GetActiveSubscriptionByCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetMembershipProxyList", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMembershipProxyList(string CstKey) {
            object[] results = this.Invoke("GetMembershipProxyList", new object[] {
                        CstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMembershipProxyListAsync(string CstKey) {
            this.GetMembershipProxyListAsync(CstKey, null);
        }
        
        /// <remarks/>
        public void GetMembershipProxyListAsync(string CstKey, object userState) {
            if ((this.GetMembershipProxyListOperationCompleted == null)) {
                this.GetMembershipProxyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMembershipProxyListOperationCompleted);
            }
            this.InvokeAsync("GetMembershipProxyList", new object[] {
                        CstKey}, this.GetMembershipProxyListOperationCompleted, userState);
        }
        
        private void OnGetMembershipProxyListOperationCompleted(object arg) {
            if ((this.GetMembershipProxyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMembershipProxyListCompleted(this, new GetMembershipProxyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetMembershipsByCustomer", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMembershipsByCustomer(string CstKey) {
            object[] results = this.Invoke("GetMembershipsByCustomer", new object[] {
                        CstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMembershipsByCustomerAsync(string CstKey) {
            this.GetMembershipsByCustomerAsync(CstKey, null);
        }
        
        /// <remarks/>
        public void GetMembershipsByCustomerAsync(string CstKey, object userState) {
            if ((this.GetMembershipsByCustomerOperationCompleted == null)) {
                this.GetMembershipsByCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMembershipsByCustomerOperationCompleted);
            }
            this.InvokeAsync("GetMembershipsByCustomer", new object[] {
                        CstKey}, this.GetMembershipsByCustomerOperationCompleted, userState);
        }
        
        private void OnGetMembershipsByCustomerOperationCompleted(object arg) {
            if ((this.GetMembershipsByCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMembershipsByCustomerCompleted(this, new GetMembershipsByCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/NewOrganizationInformation", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode NewOrganizationInformation(System.Xml.XmlNode oNode) {
            object[] results = this.Invoke("NewOrganizationInformation", new object[] {
                        oNode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void NewOrganizationInformationAsync(System.Xml.XmlNode oNode) {
            this.NewOrganizationInformationAsync(oNode, null);
        }
        
        /// <remarks/>
        public void NewOrganizationInformationAsync(System.Xml.XmlNode oNode, object userState) {
            if ((this.NewOrganizationInformationOperationCompleted == null)) {
                this.NewOrganizationInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewOrganizationInformationOperationCompleted);
            }
            this.InvokeAsync("NewOrganizationInformation", new object[] {
                        oNode}, this.NewOrganizationInformationOperationCompleted, userState);
        }
        
        private void OnNewOrganizationInformationOperationCompleted(object arg) {
            if ((this.NewOrganizationInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewOrganizationInformationCompleted(this, new NewOrganizationInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/SetOrganizationInformation", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetOrganizationInformation(string OrganizationKey, System.Xml.XmlNode oUpdateNode) {
            object[] results = this.Invoke("SetOrganizationInformation", new object[] {
                        OrganizationKey,
                        oUpdateNode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetOrganizationInformationAsync(string OrganizationKey, System.Xml.XmlNode oUpdateNode) {
            this.SetOrganizationInformationAsync(OrganizationKey, oUpdateNode, null);
        }
        
        /// <remarks/>
        public void SetOrganizationInformationAsync(string OrganizationKey, System.Xml.XmlNode oUpdateNode, object userState) {
            if ((this.SetOrganizationInformationOperationCompleted == null)) {
                this.SetOrganizationInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOrganizationInformationOperationCompleted);
            }
            this.InvokeAsync("SetOrganizationInformation", new object[] {
                        OrganizationKey,
                        oUpdateNode}, this.SetOrganizationInformationOperationCompleted, userState);
        }
        
        private void OnSetOrganizationInformationOperationCompleted(object arg) {
            if ((this.SetOrganizationInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOrganizationInformationCompleted(this, new SetOrganizationInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/NewIndividualInformation", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode NewIndividualInformation(System.Xml.XmlNode oNode) {
            object[] results = this.Invoke("NewIndividualInformation", new object[] {
                        oNode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void NewIndividualInformationAsync(System.Xml.XmlNode oNode) {
            this.NewIndividualInformationAsync(oNode, null);
        }
        
        /// <remarks/>
        public void NewIndividualInformationAsync(System.Xml.XmlNode oNode, object userState) {
            if ((this.NewIndividualInformationOperationCompleted == null)) {
                this.NewIndividualInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewIndividualInformationOperationCompleted);
            }
            this.InvokeAsync("NewIndividualInformation", new object[] {
                        oNode}, this.NewIndividualInformationOperationCompleted, userState);
        }
        
        private void OnNewIndividualInformationOperationCompleted(object arg) {
            if ((this.NewIndividualInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewIndividualInformationCompleted(this, new NewIndividualInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/SetIndividualInformation", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetIndividualInformation(string IndividualKey, System.Xml.XmlNode oUpdateNode) {
            object[] results = this.Invoke("SetIndividualInformation", new object[] {
                        IndividualKey,
                        oUpdateNode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetIndividualInformationAsync(string IndividualKey, System.Xml.XmlNode oUpdateNode) {
            this.SetIndividualInformationAsync(IndividualKey, oUpdateNode, null);
        }
        
        /// <remarks/>
        public void SetIndividualInformationAsync(string IndividualKey, System.Xml.XmlNode oUpdateNode, object userState) {
            if ((this.SetIndividualInformationOperationCompleted == null)) {
                this.SetIndividualInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIndividualInformationOperationCompleted);
            }
            this.InvokeAsync("SetIndividualInformation", new object[] {
                        IndividualKey,
                        oUpdateNode}, this.SetIndividualInformationOperationCompleted, userState);
        }
        
        private void OnSetIndividualInformationOperationCompleted(object arg) {
            if ((this.SetIndividualInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIndividualInformationCompleted(this, new SetIndividualInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/AddCustomerRelationship", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddCustomerRelationship(string ParentKey, string ChildKey, string rltCode, string startDate, string endDate) {
            object[] results = this.Invoke("AddCustomerRelationship", new object[] {
                        ParentKey,
                        ChildKey,
                        rltCode,
                        startDate,
                        endDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomerRelationshipAsync(string ParentKey, string ChildKey, string rltCode, string startDate, string endDate) {
            this.AddCustomerRelationshipAsync(ParentKey, ChildKey, rltCode, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void AddCustomerRelationshipAsync(string ParentKey, string ChildKey, string rltCode, string startDate, string endDate, object userState) {
            if ((this.AddCustomerRelationshipOperationCompleted == null)) {
                this.AddCustomerRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomerRelationshipOperationCompleted);
            }
            this.InvokeAsync("AddCustomerRelationship", new object[] {
                        ParentKey,
                        ChildKey,
                        rltCode,
                        startDate,
                        endDate}, this.AddCustomerRelationshipOperationCompleted, userState);
        }
        
        private void OnAddCustomerRelationshipOperationCompleted(object arg) {
            if ((this.AddCustomerRelationshipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomerRelationshipCompleted(this, new AddCustomerRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/SetCustomerRelationship", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetCustomerRelationship(string pxcKey, string startDate, string endDate, bool bDeleteFlag) {
            object[] results = this.Invoke("SetCustomerRelationship", new object[] {
                        pxcKey,
                        startDate,
                        endDate,
                        bDeleteFlag});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetCustomerRelationshipAsync(string pxcKey, string startDate, string endDate, bool bDeleteFlag) {
            this.SetCustomerRelationshipAsync(pxcKey, startDate, endDate, bDeleteFlag, null);
        }
        
        /// <remarks/>
        public void SetCustomerRelationshipAsync(string pxcKey, string startDate, string endDate, bool bDeleteFlag, object userState) {
            if ((this.SetCustomerRelationshipOperationCompleted == null)) {
                this.SetCustomerRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomerRelationshipOperationCompleted);
            }
            this.InvokeAsync("SetCustomerRelationship", new object[] {
                        pxcKey,
                        startDate,
                        endDate,
                        bDeleteFlag}, this.SetCustomerRelationshipOperationCompleted, userState);
        }
        
        private void OnSetCustomerRelationshipOperationCompleted(object arg) {
            if ((this.SetCustomerRelationshipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomerRelationshipCompleted(this, new SetCustomerRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerActivityHistory", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerActivityHistory(string CstKey) {
            object[] results = this.Invoke("GetCustomerActivityHistory", new object[] {
                        CstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerActivityHistoryAsync(string CstKey) {
            this.GetCustomerActivityHistoryAsync(CstKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerActivityHistoryAsync(string CstKey, object userState) {
            if ((this.GetCustomerActivityHistoryOperationCompleted == null)) {
                this.GetCustomerActivityHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerActivityHistoryOperationCompleted);
            }
            this.InvokeAsync("GetCustomerActivityHistory", new object[] {
                        CstKey}, this.GetCustomerActivityHistoryOperationCompleted, userState);
        }
        
        private void OnGetCustomerActivityHistoryOperationCompleted(object arg) {
            if ((this.GetCustomerActivityHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerActivityHistoryCompleted(this, new GetCustomerActivityHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/NewHistoricalActivity", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode NewHistoricalActivity(System.Xml.XmlNode oNode) {
            object[] results = this.Invoke("NewHistoricalActivity", new object[] {
                        oNode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void NewHistoricalActivityAsync(System.Xml.XmlNode oNode) {
            this.NewHistoricalActivityAsync(oNode, null);
        }
        
        /// <remarks/>
        public void NewHistoricalActivityAsync(System.Xml.XmlNode oNode, object userState) {
            if ((this.NewHistoricalActivityOperationCompleted == null)) {
                this.NewHistoricalActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewHistoricalActivityOperationCompleted);
            }
            this.InvokeAsync("NewHistoricalActivity", new object[] {
                        oNode}, this.NewHistoricalActivityOperationCompleted, userState);
        }
        
        private void OnNewHistoricalActivityOperationCompleted(object arg) {
            if ((this.NewHistoricalActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewHistoricalActivityCompleted(this, new NewHistoricalActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/SetHistoricalActivity", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SetHistoricalActivity(string HistoricalActivityKey, System.Xml.XmlNode oUpdateNode) {
            object[] results = this.Invoke("SetHistoricalActivity", new object[] {
                        HistoricalActivityKey,
                        oUpdateNode});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SetHistoricalActivityAsync(string HistoricalActivityKey, System.Xml.XmlNode oUpdateNode) {
            this.SetHistoricalActivityAsync(HistoricalActivityKey, oUpdateNode, null);
        }
        
        /// <remarks/>
        public void SetHistoricalActivityAsync(string HistoricalActivityKey, System.Xml.XmlNode oUpdateNode, object userState) {
            if ((this.SetHistoricalActivityOperationCompleted == null)) {
                this.SetHistoricalActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetHistoricalActivityOperationCompleted);
            }
            this.InvokeAsync("SetHistoricalActivity", new object[] {
                        HistoricalActivityKey,
                        oUpdateNode}, this.SetHistoricalActivityOperationCompleted, userState);
        }
        
        private void OnSetHistoricalActivityOperationCompleted(object arg) {
            if ((this.SetHistoricalActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetHistoricalActivityCompleted(this, new SetHistoricalActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCertificationProducts", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCertificationProducts(string szName, string szRecordDate) {
            object[] results = this.Invoke("GetCertificationProducts", new object[] {
                        szName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificationProductsAsync(string szName, string szRecordDate) {
            this.GetCertificationProductsAsync(szName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCertificationProductsAsync(string szName, string szRecordDate, object userState) {
            if ((this.GetCertificationProductsOperationCompleted == null)) {
                this.GetCertificationProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificationProductsOperationCompleted);
            }
            this.InvokeAsync("GetCertificationProducts", new object[] {
                        szName,
                        szRecordDate}, this.GetCertificationProductsOperationCompleted, userState);
        }
        
        private void OnGetCertificationProductsOperationCompleted(object arg) {
            if ((this.GetCertificationProductsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificationProductsCompleted(this, new GetCertificationProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCertificants", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCertificants(string szCertName, string szRecordDate) {
            object[] results = this.Invoke("GetCertificants", new object[] {
                        szCertName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificantsAsync(string szCertName, string szRecordDate) {
            this.GetCertificantsAsync(szCertName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCertificantsAsync(string szCertName, string szRecordDate, object userState) {
            if ((this.GetCertificantsOperationCompleted == null)) {
                this.GetCertificantsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificantsOperationCompleted);
            }
            this.InvokeAsync("GetCertificants", new object[] {
                        szCertName,
                        szRecordDate}, this.GetCertificantsOperationCompleted, userState);
        }
        
        private void OnGetCertificantsOperationCompleted(object arg) {
            if ((this.GetCertificantsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificantsCompleted(this, new GetCertificantsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCertificationPrograms", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCertificationPrograms(string szRecordDate) {
            object[] results = this.Invoke("GetCertificationPrograms", new object[] {
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificationProgramsAsync(string szRecordDate) {
            this.GetCertificationProgramsAsync(szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetCertificationProgramsAsync(string szRecordDate, object userState) {
            if ((this.GetCertificationProgramsOperationCompleted == null)) {
                this.GetCertificationProgramsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificationProgramsOperationCompleted);
            }
            this.InvokeAsync("GetCertificationPrograms", new object[] {
                        szRecordDate}, this.GetCertificationProgramsOperationCompleted, userState);
        }
        
        private void OnGetCertificationProgramsOperationCompleted(object arg) {
            if ((this.GetCertificationProgramsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificationProgramsCompleted(this, new GetCertificationProgramsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCertificantsByProgram", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCertificantsByProgram(string szRecordDate, string szPrdCode, string szStatus) {
            object[] results = this.Invoke("GetCertificantsByProgram", new object[] {
                        szRecordDate,
                        szPrdCode,
                        szStatus});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificantsByProgramAsync(string szRecordDate, string szPrdCode, string szStatus) {
            this.GetCertificantsByProgramAsync(szRecordDate, szPrdCode, szStatus, null);
        }
        
        /// <remarks/>
        public void GetCertificantsByProgramAsync(string szRecordDate, string szPrdCode, string szStatus, object userState) {
            if ((this.GetCertificantsByProgramOperationCompleted == null)) {
                this.GetCertificantsByProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificantsByProgramOperationCompleted);
            }
            this.InvokeAsync("GetCertificantsByProgram", new object[] {
                        szRecordDate,
                        szPrdCode,
                        szStatus}, this.GetCertificantsByProgramOperationCompleted, userState);
        }
        
        private void OnGetCertificantsByProgramOperationCompleted(object arg) {
            if ((this.GetCertificantsByProgramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificantsByProgramCompleted(this, new GetCertificantsByProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetPropertyByOwner", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPropertyByOwner(string szCstId) {
            object[] results = this.Invoke("GetPropertyByOwner", new object[] {
                        szCstId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyByOwnerAsync(string szCstId) {
            this.GetPropertyByOwnerAsync(szCstId, null);
        }
        
        /// <remarks/>
        public void GetPropertyByOwnerAsync(string szCstId, object userState) {
            if ((this.GetPropertyByOwnerOperationCompleted == null)) {
                this.GetPropertyByOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyByOwnerOperationCompleted);
            }
            this.InvokeAsync("GetPropertyByOwner", new object[] {
                        szCstId}, this.GetPropertyByOwnerOperationCompleted, userState);
        }
        
        private void OnGetPropertyByOwnerOperationCompleted(object arg) {
            if ((this.GetPropertyByOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyByOwnerCompleted(this, new GetPropertyByOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetPropertyByCategory", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPropertyByCategory(string szCategory) {
            object[] results = this.Invoke("GetPropertyByCategory", new object[] {
                        szCategory});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyByCategoryAsync(string szCategory) {
            this.GetPropertyByCategoryAsync(szCategory, null);
        }
        
        /// <remarks/>
        public void GetPropertyByCategoryAsync(string szCategory, object userState) {
            if ((this.GetPropertyByCategoryOperationCompleted == null)) {
                this.GetPropertyByCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyByCategoryOperationCompleted);
            }
            this.InvokeAsync("GetPropertyByCategory", new object[] {
                        szCategory}, this.GetPropertyByCategoryOperationCompleted, userState);
        }
        
        private void OnGetPropertyByCategoryOperationCompleted(object arg) {
            if ((this.GetPropertyByCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyByCategoryCompleted(this, new GetPropertyByCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetPropertyCategories", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPropertyCategories() {
            object[] results = this.Invoke("GetPropertyCategories", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyCategoriesAsync() {
            this.GetPropertyCategoriesAsync(null);
        }
        
        /// <remarks/>
        public void GetPropertyCategoriesAsync(object userState) {
            if ((this.GetPropertyCategoriesOperationCompleted == null)) {
                this.GetPropertyCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetPropertyCategories", new object[0], this.GetPropertyCategoriesOperationCompleted, userState);
        }
        
        private void OnGetPropertyCategoriesOperationCompleted(object arg) {
            if ((this.GetPropertyCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyCategoriesCompleted(this, new GetPropertyCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetPropertyByType", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPropertyByType(string szType) {
            object[] results = this.Invoke("GetPropertyByType", new object[] {
                        szType});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyByTypeAsync(string szType) {
            this.GetPropertyByTypeAsync(szType, null);
        }
        
        /// <remarks/>
        public void GetPropertyByTypeAsync(string szType, object userState) {
            if ((this.GetPropertyByTypeOperationCompleted == null)) {
                this.GetPropertyByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyByTypeOperationCompleted);
            }
            this.InvokeAsync("GetPropertyByType", new object[] {
                        szType}, this.GetPropertyByTypeOperationCompleted, userState);
        }
        
        private void OnGetPropertyByTypeOperationCompleted(object arg) {
            if ((this.GetPropertyByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyByTypeCompleted(this, new GetPropertyByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetPropertyTypes", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPropertyTypes() {
            object[] results = this.Invoke("GetPropertyTypes", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyTypesAsync() {
            this.GetPropertyTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetPropertyTypesAsync(object userState) {
            if ((this.GetPropertyTypesOperationCompleted == null)) {
                this.GetPropertyTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypesOperationCompleted);
            }
            this.InvokeAsync("GetPropertyTypes", new object[0], this.GetPropertyTypesOperationCompleted, userState);
        }
        
        private void OnGetPropertyTypesOperationCompleted(object arg) {
            if ((this.GetPropertyTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyTypesCompleted(this, new GetPropertyTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetMultiSelectValues", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMultiSelectValues(string szType, int iNumber) {
            object[] results = this.Invoke("GetMultiSelectValues", new object[] {
                        szType,
                        iNumber});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultiSelectValuesAsync(string szType, int iNumber) {
            this.GetMultiSelectValuesAsync(szType, iNumber, null);
        }
        
        /// <remarks/>
        public void GetMultiSelectValuesAsync(string szType, int iNumber, object userState) {
            if ((this.GetMultiSelectValuesOperationCompleted == null)) {
                this.GetMultiSelectValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultiSelectValuesOperationCompleted);
            }
            this.InvokeAsync("GetMultiSelectValues", new object[] {
                        szType,
                        iNumber}, this.GetMultiSelectValuesOperationCompleted, userState);
        }
        
        private void OnGetMultiSelectValuesOperationCompleted(object arg) {
            if ((this.GetMultiSelectValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultiSelectValuesCompleted(this, new GetMultiSelectValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetAwardEntriesByCustomer", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAwardEntriesByCustomer(string szName, string szRecordDate) {
            object[] results = this.Invoke("GetAwardEntriesByCustomer", new object[] {
                        szName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAwardEntriesByCustomerAsync(string szName, string szRecordDate) {
            this.GetAwardEntriesByCustomerAsync(szName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetAwardEntriesByCustomerAsync(string szName, string szRecordDate, object userState) {
            if ((this.GetAwardEntriesByCustomerOperationCompleted == null)) {
                this.GetAwardEntriesByCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAwardEntriesByCustomerOperationCompleted);
            }
            this.InvokeAsync("GetAwardEntriesByCustomer", new object[] {
                        szName,
                        szRecordDate}, this.GetAwardEntriesByCustomerOperationCompleted, userState);
        }
        
        private void OnGetAwardEntriesByCustomerOperationCompleted(object arg) {
            if ((this.GetAwardEntriesByCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAwardEntriesByCustomerCompleted(this, new GetAwardEntriesByCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetAwardEntriesByAward", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAwardEntriesByAward(string szName, string szRecordDate) {
            object[] results = this.Invoke("GetAwardEntriesByAward", new object[] {
                        szName,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAwardEntriesByAwardAsync(string szName, string szRecordDate) {
            this.GetAwardEntriesByAwardAsync(szName, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetAwardEntriesByAwardAsync(string szName, string szRecordDate, object userState) {
            if ((this.GetAwardEntriesByAwardOperationCompleted == null)) {
                this.GetAwardEntriesByAwardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAwardEntriesByAwardOperationCompleted);
            }
            this.InvokeAsync("GetAwardEntriesByAward", new object[] {
                        szName,
                        szRecordDate}, this.GetAwardEntriesByAwardOperationCompleted, userState);
        }
        
        private void OnGetAwardEntriesByAwardOperationCompleted(object arg) {
            if ((this.GetAwardEntriesByAwardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAwardEntriesByAwardCompleted(this, new GetAwardEntriesByAwardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetAwardJudges", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAwardJudges(string szAwardNumber, string szRecordDate) {
            object[] results = this.Invoke("GetAwardJudges", new object[] {
                        szAwardNumber,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAwardJudgesAsync(string szAwardNumber, string szRecordDate) {
            this.GetAwardJudgesAsync(szAwardNumber, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetAwardJudgesAsync(string szAwardNumber, string szRecordDate, object userState) {
            if ((this.GetAwardJudgesOperationCompleted == null)) {
                this.GetAwardJudgesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAwardJudgesOperationCompleted);
            }
            this.InvokeAsync("GetAwardJudges", new object[] {
                        szAwardNumber,
                        szRecordDate}, this.GetAwardJudgesOperationCompleted, userState);
        }
        
        private void OnGetAwardJudgesOperationCompleted(object arg) {
            if ((this.GetAwardJudgesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAwardJudgesCompleted(this, new GetAwardJudgesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetLocationByEvent", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLocationByEvent(string szEvtKey, string szRecordDate) {
            object[] results = this.Invoke("GetLocationByEvent", new object[] {
                        szEvtKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationByEventAsync(string szEvtKey, string szRecordDate) {
            this.GetLocationByEventAsync(szEvtKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetLocationByEventAsync(string szEvtKey, string szRecordDate, object userState) {
            if ((this.GetLocationByEventOperationCompleted == null)) {
                this.GetLocationByEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationByEventOperationCompleted);
            }
            this.InvokeAsync("GetLocationByEvent", new object[] {
                        szEvtKey,
                        szRecordDate}, this.GetLocationByEventOperationCompleted, userState);
        }
        
        private void OnGetLocationByEventOperationCompleted(object arg) {
            if ((this.GetLocationByEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationByEventCompleted(this, new GetLocationByEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetTracksByEvent", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetTracksByEvent(string szEvtKey, string szRecordDate) {
            object[] results = this.Invoke("GetTracksByEvent", new object[] {
                        szEvtKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetTracksByEventAsync(string szEvtKey, string szRecordDate) {
            this.GetTracksByEventAsync(szEvtKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetTracksByEventAsync(string szEvtKey, string szRecordDate, object userState) {
            if ((this.GetTracksByEventOperationCompleted == null)) {
                this.GetTracksByEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTracksByEventOperationCompleted);
            }
            this.InvokeAsync("GetTracksByEvent", new object[] {
                        szEvtKey,
                        szRecordDate}, this.GetTracksByEventOperationCompleted, userState);
        }
        
        private void OnGetTracksByEventOperationCompleted(object arg) {
            if ((this.GetTracksByEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTracksByEventCompleted(this, new GetTracksByEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetSessionsByTrackCode", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSessionsByTrackCode(string szEvtKey, string szTrackCode, string szRecordDate) {
            object[] results = this.Invoke("GetSessionsByTrackCode", new object[] {
                        szEvtKey,
                        szTrackCode,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionsByTrackCodeAsync(string szEvtKey, string szTrackCode, string szRecordDate) {
            this.GetSessionsByTrackCodeAsync(szEvtKey, szTrackCode, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetSessionsByTrackCodeAsync(string szEvtKey, string szTrackCode, string szRecordDate, object userState) {
            if ((this.GetSessionsByTrackCodeOperationCompleted == null)) {
                this.GetSessionsByTrackCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionsByTrackCodeOperationCompleted);
            }
            this.InvokeAsync("GetSessionsByTrackCode", new object[] {
                        szEvtKey,
                        szTrackCode,
                        szRecordDate}, this.GetSessionsByTrackCodeOperationCompleted, userState);
        }
        
        private void OnGetSessionsByTrackCodeOperationCompleted(object arg) {
            if ((this.GetSessionsByTrackCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionsByTrackCodeCompleted(this, new GetSessionsByTrackCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetRoomByLocation", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoomByLocation(string szLocKey, string szRecordDate) {
            object[] results = this.Invoke("GetRoomByLocation", new object[] {
                        szLocKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoomByLocationAsync(string szLocKey, string szRecordDate) {
            this.GetRoomByLocationAsync(szLocKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetRoomByLocationAsync(string szLocKey, string szRecordDate, object userState) {
            if ((this.GetRoomByLocationOperationCompleted == null)) {
                this.GetRoomByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoomByLocationOperationCompleted);
            }
            this.InvokeAsync("GetRoomByLocation", new object[] {
                        szLocKey,
                        szRecordDate}, this.GetRoomByLocationOperationCompleted, userState);
        }
        
        private void OnGetRoomByLocationOperationCompleted(object arg) {
            if ((this.GetRoomByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoomByLocationCompleted(this, new GetRoomByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetRoomSessionByLocation", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoomSessionByLocation(string szLocKey, string szRecordDate) {
            object[] results = this.Invoke("GetRoomSessionByLocation", new object[] {
                        szLocKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoomSessionByLocationAsync(string szLocKey, string szRecordDate) {
            this.GetRoomSessionByLocationAsync(szLocKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetRoomSessionByLocationAsync(string szLocKey, string szRecordDate, object userState) {
            if ((this.GetRoomSessionByLocationOperationCompleted == null)) {
                this.GetRoomSessionByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoomSessionByLocationOperationCompleted);
            }
            this.InvokeAsync("GetRoomSessionByLocation", new object[] {
                        szLocKey,
                        szRecordDate}, this.GetRoomSessionByLocationOperationCompleted, userState);
        }
        
        private void OnGetRoomSessionByLocationOperationCompleted(object arg) {
            if ((this.GetRoomSessionByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoomSessionByLocationCompleted(this, new GetRoomSessionByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetSpeakerInfoBySessionKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSpeakerInfoBySessionKey(string szSesKey, string szRecordDate) {
            object[] results = this.Invoke("GetSpeakerInfoBySessionKey", new object[] {
                        szSesKey,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSpeakerInfoBySessionKeyAsync(string szSesKey, string szRecordDate) {
            this.GetSpeakerInfoBySessionKeyAsync(szSesKey, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetSpeakerInfoBySessionKeyAsync(string szSesKey, string szRecordDate, object userState) {
            if ((this.GetSpeakerInfoBySessionKeyOperationCompleted == null)) {
                this.GetSpeakerInfoBySessionKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpeakerInfoBySessionKeyOperationCompleted);
            }
            this.InvokeAsync("GetSpeakerInfoBySessionKey", new object[] {
                        szSesKey,
                        szRecordDate}, this.GetSpeakerInfoBySessionKeyOperationCompleted, userState);
        }
        
        private void OnGetSpeakerInfoBySessionKeyOperationCompleted(object arg) {
            if ((this.GetSpeakerInfoBySessionKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpeakerInfoBySessionKeyCompleted(this, new GetSpeakerInfoBySessionKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetIndividualChangesByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetIndividualChangesByDate(string szStartDate, string szEndDate) {
            object[] results = this.Invoke("GetIndividualChangesByDate", new object[] {
                        szStartDate,
                        szEndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetIndividualChangesByDateAsync(string szStartDate, string szEndDate) {
            this.GetIndividualChangesByDateAsync(szStartDate, szEndDate, null);
        }
        
        /// <remarks/>
        public void GetIndividualChangesByDateAsync(string szStartDate, string szEndDate, object userState) {
            if ((this.GetIndividualChangesByDateOperationCompleted == null)) {
                this.GetIndividualChangesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIndividualChangesByDateOperationCompleted);
            }
            this.InvokeAsync("GetIndividualChangesByDate", new object[] {
                        szStartDate,
                        szEndDate}, this.GetIndividualChangesByDateOperationCompleted, userState);
        }
        
        private void OnGetIndividualChangesByDateOperationCompleted(object arg) {
            if ((this.GetIndividualChangesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIndividualChangesByDateCompleted(this, new GetIndividualChangesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetOrganizationChangesByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrganizationChangesByDate(string szStartDate, string szEndDate) {
            object[] results = this.Invoke("GetOrganizationChangesByDate", new object[] {
                        szStartDate,
                        szEndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationChangesByDateAsync(string szStartDate, string szEndDate) {
            this.GetOrganizationChangesByDateAsync(szStartDate, szEndDate, null);
        }
        
        /// <remarks/>
        public void GetOrganizationChangesByDateAsync(string szStartDate, string szEndDate, object userState) {
            if ((this.GetOrganizationChangesByDateOperationCompleted == null)) {
                this.GetOrganizationChangesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationChangesByDateOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationChangesByDate", new object[] {
                        szStartDate,
                        szEndDate}, this.GetOrganizationChangesByDateOperationCompleted, userState);
        }
        
        private void OnGetOrganizationChangesByDateOperationCompleted(object arg) {
            if ((this.GetOrganizationChangesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationChangesByDateCompleted(this, new GetOrganizationChangesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetMembershipChangesByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMembershipChangesByDate(string szStartDate, string szEndDate) {
            object[] results = this.Invoke("GetMembershipChangesByDate", new object[] {
                        szStartDate,
                        szEndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMembershipChangesByDateAsync(string szStartDate, string szEndDate) {
            this.GetMembershipChangesByDateAsync(szStartDate, szEndDate, null);
        }
        
        /// <remarks/>
        public void GetMembershipChangesByDateAsync(string szStartDate, string szEndDate, object userState) {
            if ((this.GetMembershipChangesByDateOperationCompleted == null)) {
                this.GetMembershipChangesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMembershipChangesByDateOperationCompleted);
            }
            this.InvokeAsync("GetMembershipChangesByDate", new object[] {
                        szStartDate,
                        szEndDate}, this.GetMembershipChangesByDateOperationCompleted, userState);
        }
        
        private void OnGetMembershipChangesByDateOperationCompleted(object arg) {
            if ((this.GetMembershipChangesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMembershipChangesByDateCompleted(this, new GetMembershipChangesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetRegistrantChangesByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRegistrantChangesByDate(string szStartDate, string szEndDate) {
            object[] results = this.Invoke("GetRegistrantChangesByDate", new object[] {
                        szStartDate,
                        szEndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegistrantChangesByDateAsync(string szStartDate, string szEndDate) {
            this.GetRegistrantChangesByDateAsync(szStartDate, szEndDate, null);
        }
        
        /// <remarks/>
        public void GetRegistrantChangesByDateAsync(string szStartDate, string szEndDate, object userState) {
            if ((this.GetRegistrantChangesByDateOperationCompleted == null)) {
                this.GetRegistrantChangesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegistrantChangesByDateOperationCompleted);
            }
            this.InvokeAsync("GetRegistrantChangesByDate", new object[] {
                        szStartDate,
                        szEndDate}, this.GetRegistrantChangesByDateOperationCompleted, userState);
        }
        
        private void OnGetRegistrantChangesByDateOperationCompleted(object arg) {
            if ((this.GetRegistrantChangesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegistrantChangesByDateCompleted(this, new GetRegistrantChangesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCommitteeParticipationChangesByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCommitteeParticipationChangesByDate(string szStartDate, string szEndDate) {
            object[] results = this.Invoke("GetCommitteeParticipationChangesByDate", new object[] {
                        szStartDate,
                        szEndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitteeParticipationChangesByDateAsync(string szStartDate, string szEndDate) {
            this.GetCommitteeParticipationChangesByDateAsync(szStartDate, szEndDate, null);
        }
        
        /// <remarks/>
        public void GetCommitteeParticipationChangesByDateAsync(string szStartDate, string szEndDate, object userState) {
            if ((this.GetCommitteeParticipationChangesByDateOperationCompleted == null)) {
                this.GetCommitteeParticipationChangesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitteeParticipationChangesByDateOperationCompleted);
            }
            this.InvokeAsync("GetCommitteeParticipationChangesByDate", new object[] {
                        szStartDate,
                        szEndDate}, this.GetCommitteeParticipationChangesByDateOperationCompleted, userState);
        }
        
        private void OnGetCommitteeParticipationChangesByDateOperationCompleted(object arg) {
            if ((this.GetCommitteeParticipationChangesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitteeParticipationChangesByDateCompleted(this, new GetCommitteeParticipationChangesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetIndividualByDemographic", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetIndividualByDemographic([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szDemographicField, string szDemographicValue) {
            object[] results = this.Invoke("GetIndividualByDemographic", new object[] {
                        szDemographicField,
                        szDemographicValue});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetIndividualByDemographicAsync(string szDemographicField, string szDemographicValue) {
            this.GetIndividualByDemographicAsync(szDemographicField, szDemographicValue, null);
        }
        
        /// <remarks/>
        public void GetIndividualByDemographicAsync(string szDemographicField, string szDemographicValue, object userState) {
            if ((this.GetIndividualByDemographicOperationCompleted == null)) {
                this.GetIndividualByDemographicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIndividualByDemographicOperationCompleted);
            }
            this.InvokeAsync("GetIndividualByDemographic", new object[] {
                        szDemographicField,
                        szDemographicValue}, this.GetIndividualByDemographicOperationCompleted, userState);
        }
        
        private void OnGetIndividualByDemographicOperationCompleted(object arg) {
            if ((this.GetIndividualByDemographicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIndividualByDemographicCompleted(this, new GetIndividualByDemographicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetOrganizationByDemographic", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrganizationByDemographic([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szDemographicField, string szDemographicValue) {
            object[] results = this.Invoke("GetOrganizationByDemographic", new object[] {
                        szDemographicField,
                        szDemographicValue});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationByDemographicAsync(string szDemographicField, string szDemographicValue) {
            this.GetOrganizationByDemographicAsync(szDemographicField, szDemographicValue, null);
        }
        
        /// <remarks/>
        public void GetOrganizationByDemographicAsync(string szDemographicField, string szDemographicValue, object userState) {
            if ((this.GetOrganizationByDemographicOperationCompleted == null)) {
                this.GetOrganizationByDemographicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationByDemographicOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationByDemographic", new object[] {
                        szDemographicField,
                        szDemographicValue}, this.GetOrganizationByDemographicOperationCompleted, userState);
        }
        
        private void OnGetOrganizationByDemographicOperationCompleted(object arg) {
            if ((this.GetOrganizationByDemographicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationByDemographicCompleted(this, new GetOrganizationByDemographicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventFeesByEventKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEventFeesByEventKey([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szEventkey, string szSessionKey, string szAvailableAsOfDate, bool bOnlineOnly, bool bExcludeInactive) {
            object[] results = this.Invoke("GetEventFeesByEventKey", new object[] {
                        szEventkey,
                        szSessionKey,
                        szAvailableAsOfDate,
                        bOnlineOnly,
                        bExcludeInactive});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventFeesByEventKeyAsync(string szEventkey, string szSessionKey, string szAvailableAsOfDate, bool bOnlineOnly, bool bExcludeInactive) {
            this.GetEventFeesByEventKeyAsync(szEventkey, szSessionKey, szAvailableAsOfDate, bOnlineOnly, bExcludeInactive, null);
        }
        
        /// <remarks/>
        public void GetEventFeesByEventKeyAsync(string szEventkey, string szSessionKey, string szAvailableAsOfDate, bool bOnlineOnly, bool bExcludeInactive, object userState) {
            if ((this.GetEventFeesByEventKeyOperationCompleted == null)) {
                this.GetEventFeesByEventKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventFeesByEventKeyOperationCompleted);
            }
            this.InvokeAsync("GetEventFeesByEventKey", new object[] {
                        szEventkey,
                        szSessionKey,
                        szAvailableAsOfDate,
                        bOnlineOnly,
                        bExcludeInactive}, this.GetEventFeesByEventKeyOperationCompleted, userState);
        }
        
        private void OnGetEventFeesByEventKeyOperationCompleted(object arg) {
            if ((this.GetEventFeesByEventKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventFeesByEventKeyCompleted(this, new GetEventFeesByEventKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCstKeyFromLicenseNumber", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCstKeyFromLicenseNumber([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szLicenseNumber) {
            object[] results = this.Invoke("GetCstKeyFromLicenseNumber", new object[] {
                        szLicenseNumber});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCstKeyFromLicenseNumberAsync(string szLicenseNumber) {
            this.GetCstKeyFromLicenseNumberAsync(szLicenseNumber, null);
        }
        
        /// <remarks/>
        public void GetCstKeyFromLicenseNumberAsync(string szLicenseNumber, object userState) {
            if ((this.GetCstKeyFromLicenseNumberOperationCompleted == null)) {
                this.GetCstKeyFromLicenseNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCstKeyFromLicenseNumberOperationCompleted);
            }
            this.InvokeAsync("GetCstKeyFromLicenseNumber", new object[] {
                        szLicenseNumber}, this.GetCstKeyFromLicenseNumberOperationCompleted, userState);
        }
        
        private void OnGetCstKeyFromLicenseNumberOperationCompleted(object arg) {
            if ((this.GetCstKeyFromLicenseNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCstKeyFromLicenseNumberCompleted(this, new GetCstKeyFromLicenseNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCstKeyFromRealtorId", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCstKeyFromRealtorId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szRealtorId, bool bIncludeIndividuals, bool bIncludeOrganizations) {
            object[] results = this.Invoke("GetCstKeyFromRealtorId", new object[] {
                        szRealtorId,
                        bIncludeIndividuals,
                        bIncludeOrganizations});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCstKeyFromRealtorIdAsync(string szRealtorId, bool bIncludeIndividuals, bool bIncludeOrganizations) {
            this.GetCstKeyFromRealtorIdAsync(szRealtorId, bIncludeIndividuals, bIncludeOrganizations, null);
        }
        
        /// <remarks/>
        public void GetCstKeyFromRealtorIdAsync(string szRealtorId, bool bIncludeIndividuals, bool bIncludeOrganizations, object userState) {
            if ((this.GetCstKeyFromRealtorIdOperationCompleted == null)) {
                this.GetCstKeyFromRealtorIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCstKeyFromRealtorIdOperationCompleted);
            }
            this.InvokeAsync("GetCstKeyFromRealtorId", new object[] {
                        szRealtorId,
                        bIncludeIndividuals,
                        bIncludeOrganizations}, this.GetCstKeyFromRealtorIdOperationCompleted, userState);
        }
        
        private void OnGetCstKeyFromRealtorIdOperationCompleted(object arg) {
            if ((this.GetCstKeyFromRealtorIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCstKeyFromRealtorIdCompleted(this, new GetCstKeyFromRealtorIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerByMembershipType", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerByMembershipType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string productKey, string szRecordDate, bool bMemberOnly, bool bIncludeIndividual, bool bIncludeOrganization, bool bNotTerminated, bool bNotExpired, string szJoinedAfterDate) {
            object[] results = this.Invoke("GetCustomerByMembershipType", new object[] {
                        productKey,
                        szRecordDate,
                        bMemberOnly,
                        bIncludeIndividual,
                        bIncludeOrganization,
                        bNotTerminated,
                        bNotExpired,
                        szJoinedAfterDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerByMembershipTypeAsync(string productKey, string szRecordDate, bool bMemberOnly, bool bIncludeIndividual, bool bIncludeOrganization, bool bNotTerminated, bool bNotExpired, string szJoinedAfterDate) {
            this.GetCustomerByMembershipTypeAsync(productKey, szRecordDate, bMemberOnly, bIncludeIndividual, bIncludeOrganization, bNotTerminated, bNotExpired, szJoinedAfterDate, null);
        }
        
        /// <remarks/>
        public void GetCustomerByMembershipTypeAsync(string productKey, string szRecordDate, bool bMemberOnly, bool bIncludeIndividual, bool bIncludeOrganization, bool bNotTerminated, bool bNotExpired, string szJoinedAfterDate, object userState) {
            if ((this.GetCustomerByMembershipTypeOperationCompleted == null)) {
                this.GetCustomerByMembershipTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByMembershipTypeOperationCompleted);
            }
            this.InvokeAsync("GetCustomerByMembershipType", new object[] {
                        productKey,
                        szRecordDate,
                        bMemberOnly,
                        bIncludeIndividual,
                        bIncludeOrganization,
                        bNotTerminated,
                        bNotExpired,
                        szJoinedAfterDate}, this.GetCustomerByMembershipTypeOperationCompleted, userState);
        }
        
        private void OnGetCustomerByMembershipTypeOperationCompleted(object arg) {
            if ((this.GetCustomerByMembershipTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerByMembershipTypeCompleted(this, new GetCustomerByMembershipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetChildOrgsByParentOrgKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetChildOrgsByParentOrgKey([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szParentOrgKey) {
            object[] results = this.Invoke("GetChildOrgsByParentOrgKey", new object[] {
                        szParentOrgKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetChildOrgsByParentOrgKeyAsync(string szParentOrgKey) {
            this.GetChildOrgsByParentOrgKeyAsync(szParentOrgKey, null);
        }
        
        /// <remarks/>
        public void GetChildOrgsByParentOrgKeyAsync(string szParentOrgKey, object userState) {
            if ((this.GetChildOrgsByParentOrgKeyOperationCompleted == null)) {
                this.GetChildOrgsByParentOrgKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildOrgsByParentOrgKeyOperationCompleted);
            }
            this.InvokeAsync("GetChildOrgsByParentOrgKey", new object[] {
                        szParentOrgKey}, this.GetChildOrgsByParentOrgKeyOperationCompleted, userState);
        }
        
        private void OnGetChildOrgsByParentOrgKeyOperationCompleted(object arg) {
            if ((this.GetChildOrgsByParentOrgKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildOrgsByParentOrgKeyCompleted(this, new GetChildOrgsByParentOrgKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerRealtorMembershipList", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerRealtorMembershipList(string CstKey) {
            object[] results = this.Invoke("GetCustomerRealtorMembershipList", new object[] {
                        CstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerRealtorMembershipListAsync(string CstKey) {
            this.GetCustomerRealtorMembershipListAsync(CstKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerRealtorMembershipListAsync(string CstKey, object userState) {
            if ((this.GetCustomerRealtorMembershipListOperationCompleted == null)) {
                this.GetCustomerRealtorMembershipListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerRealtorMembershipListOperationCompleted);
            }
            this.InvokeAsync("GetCustomerRealtorMembershipList", new object[] {
                        CstKey}, this.GetCustomerRealtorMembershipListOperationCompleted, userState);
        }
        
        private void OnGetCustomerRealtorMembershipListOperationCompleted(object arg) {
            if ((this.GetCustomerRealtorMembershipListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerRealtorMembershipListCompleted(this, new GetCustomerRealtorMembershipListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetOrganizationByType", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexedResultListOfOrganizationByTypeResult GetOrganizationByType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string typeCode, bool bMembersOnly, string startIndex) {
            object[] results = this.Invoke("GetOrganizationByType", new object[] {
                        typeCode,
                        bMembersOnly,
                        startIndex});
            return ((IndexedResultListOfOrganizationByTypeResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationByTypeAsync(string typeCode, bool bMembersOnly, string startIndex) {
            this.GetOrganizationByTypeAsync(typeCode, bMembersOnly, startIndex, null);
        }
        
        /// <remarks/>
        public void GetOrganizationByTypeAsync(string typeCode, bool bMembersOnly, string startIndex, object userState) {
            if ((this.GetOrganizationByTypeOperationCompleted == null)) {
                this.GetOrganizationByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationByTypeOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationByType", new object[] {
                        typeCode,
                        bMembersOnly,
                        startIndex}, this.GetOrganizationByTypeOperationCompleted, userState);
        }
        
        private void OnGetOrganizationByTypeOperationCompleted(object arg) {
            if ((this.GetOrganizationByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationByTypeCompleted(this, new GetOrganizationByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetEventListByType", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEventListByType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string typeCode, string szRecordDate) {
            object[] results = this.Invoke("GetEventListByType", new object[] {
                        typeCode,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEventListByTypeAsync(string typeCode, string szRecordDate) {
            this.GetEventListByTypeAsync(typeCode, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetEventListByTypeAsync(string typeCode, string szRecordDate, object userState) {
            if ((this.GetEventListByTypeOperationCompleted == null)) {
                this.GetEventListByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventListByTypeOperationCompleted);
            }
            this.InvokeAsync("GetEventListByType", new object[] {
                        typeCode,
                        szRecordDate}, this.GetEventListByTypeOperationCompleted, userState);
        }
        
        private void OnGetEventListByTypeOperationCompleted(object arg) {
            if ((this.GetEventListByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventListByTypeCompleted(this, new GetEventListByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetProductListByType", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProductListByType([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string typeCode, string szRecordDate) {
            object[] results = this.Invoke("GetProductListByType", new object[] {
                        typeCode,
                        szRecordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListByTypeAsync(string typeCode, string szRecordDate) {
            this.GetProductListByTypeAsync(typeCode, szRecordDate, null);
        }
        
        /// <remarks/>
        public void GetProductListByTypeAsync(string typeCode, string szRecordDate, object userState) {
            if ((this.GetProductListByTypeOperationCompleted == null)) {
                this.GetProductListByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListByTypeOperationCompleted);
            }
            this.InvokeAsync("GetProductListByType", new object[] {
                        typeCode,
                        szRecordDate}, this.GetProductListByTypeOperationCompleted, userState);
        }
        
        private void OnGetProductListByTypeOperationCompleted(object arg) {
            if ((this.GetProductListByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListByTypeCompleted(this, new GetProductListByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetIndividualListByOrganizationRelationship", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexedResultListOfIndividualRelationshipResult GetIndividualListByOrganizationRelationship([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string organizationKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string typeCode, bool bMembersOnly, string startIndex) {
            object[] results = this.Invoke("GetIndividualListByOrganizationRelationship", new object[] {
                        organizationKey,
                        typeCode,
                        bMembersOnly,
                        startIndex});
            return ((IndexedResultListOfIndividualRelationshipResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetIndividualListByOrganizationRelationshipAsync(string organizationKey, string typeCode, bool bMembersOnly, string startIndex) {
            this.GetIndividualListByOrganizationRelationshipAsync(organizationKey, typeCode, bMembersOnly, startIndex, null);
        }
        
        /// <remarks/>
        public void GetIndividualListByOrganizationRelationshipAsync(string organizationKey, string typeCode, bool bMembersOnly, string startIndex, object userState) {
            if ((this.GetIndividualListByOrganizationRelationshipOperationCompleted == null)) {
                this.GetIndividualListByOrganizationRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIndividualListByOrganizationRelationshipOperationCompleted);
            }
            this.InvokeAsync("GetIndividualListByOrganizationRelationship", new object[] {
                        organizationKey,
                        typeCode,
                        bMembersOnly,
                        startIndex}, this.GetIndividualListByOrganizationRelationshipOperationCompleted, userState);
        }
        
        private void OnGetIndividualListByOrganizationRelationshipOperationCompleted(object arg) {
            if ((this.GetIndividualListByOrganizationRelationshipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIndividualListByOrganizationRelationshipCompleted(this, new GetIndividualListByOrganizationRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetIndividualListByChangeDateRelationship", RequestElementName="GetIndividualListByChangeDateRelationship", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseElementName="GetIndividualListByChangeDateRelationshipResponse", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetIndividualListByChangeDateRelationshipResult")]
        public IndexedResultListOfIndividualRelationshipResult GetIndividualListByChangedDateRelationship([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string recordDate, string typeCode) {
            object[] results = this.Invoke("GetIndividualListByChangedDateRelationship", new object[] {
                        recordDate,
                        typeCode});
            return ((IndexedResultListOfIndividualRelationshipResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetIndividualListByChangedDateRelationshipAsync(string recordDate, string typeCode) {
            this.GetIndividualListByChangedDateRelationshipAsync(recordDate, typeCode, null);
        }
        
        /// <remarks/>
        public void GetIndividualListByChangedDateRelationshipAsync(string recordDate, string typeCode, object userState) {
            if ((this.GetIndividualListByChangedDateRelationshipOperationCompleted == null)) {
                this.GetIndividualListByChangedDateRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIndividualListByChangedDateRelationshipOperationCompleted);
            }
            this.InvokeAsync("GetIndividualListByChangedDateRelationship", new object[] {
                        recordDate,
                        typeCode}, this.GetIndividualListByChangedDateRelationshipOperationCompleted, userState);
        }
        
        private void OnGetIndividualListByChangedDateRelationshipOperationCompleted(object arg) {
            if ((this.GetIndividualListByChangedDateRelationshipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIndividualListByChangedDateRelationshipCompleted(this, new GetIndividualListByChangedDateRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetRelationshipsByIndiviual", RequestElementName="GetRelationshipsByIndiviual", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseElementName="GetRelationshipsByIndiviualResponse", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetRelationshipsByIndiviualResult")]
        public System.Xml.XmlNode GetRelationshipsByIndividual([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cstKey) {
            object[] results = this.Invoke("GetRelationshipsByIndividual", new object[] {
                        cstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRelationshipsByIndividualAsync(string cstKey) {
            this.GetRelationshipsByIndividualAsync(cstKey, null);
        }
        
        /// <remarks/>
        public void GetRelationshipsByIndividualAsync(string cstKey, object userState) {
            if ((this.GetRelationshipsByIndividualOperationCompleted == null)) {
                this.GetRelationshipsByIndividualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRelationshipsByIndividualOperationCompleted);
            }
            this.InvokeAsync("GetRelationshipsByIndividual", new object[] {
                        cstKey}, this.GetRelationshipsByIndividualOperationCompleted, userState);
        }
        
        private void OnGetRelationshipsByIndividualOperationCompleted(object arg) {
            if ((this.GetRelationshipsByIndividualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRelationshipsByIndividualCompleted(this, new GetRelationshipsByIndividualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetCustomerCertifications", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCustomerCertifications([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cstKey) {
            object[] results = this.Invoke("GetCustomerCertifications", new object[] {
                        cstKey});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerCertificationsAsync(string cstKey) {
            this.GetCustomerCertificationsAsync(cstKey, null);
        }
        
        /// <remarks/>
        public void GetCustomerCertificationsAsync(string cstKey, object userState) {
            if ((this.GetCustomerCertificationsOperationCompleted == null)) {
                this.GetCustomerCertificationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerCertificationsOperationCompleted);
            }
            this.InvokeAsync("GetCustomerCertifications", new object[] {
                        cstKey}, this.GetCustomerCertificationsOperationCompleted, userState);
        }
        
        private void OnGetCustomerCertificationsOperationCompleted(object arg) {
            if ((this.GetCustomerCertificationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerCertificationsCompleted(this, new GetCustomerCertificationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetIndividualByPrimaryOrganization", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetIndividualByPrimaryOrganization([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string organizationKey, bool bMembersOnly, string recordDate) {
            object[] results = this.Invoke("GetIndividualByPrimaryOrganization", new object[] {
                        organizationKey,
                        bMembersOnly,
                        recordDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetIndividualByPrimaryOrganizationAsync(string organizationKey, bool bMembersOnly, string recordDate) {
            this.GetIndividualByPrimaryOrganizationAsync(organizationKey, bMembersOnly, recordDate, null);
        }
        
        /// <remarks/>
        public void GetIndividualByPrimaryOrganizationAsync(string organizationKey, bool bMembersOnly, string recordDate, object userState) {
            if ((this.GetIndividualByPrimaryOrganizationOperationCompleted == null)) {
                this.GetIndividualByPrimaryOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIndividualByPrimaryOrganizationOperationCompleted);
            }
            this.InvokeAsync("GetIndividualByPrimaryOrganization", new object[] {
                        organizationKey,
                        bMembersOnly,
                        recordDate}, this.GetIndividualByPrimaryOrganizationOperationCompleted, userState);
        }
        
        private void OnGetIndividualByPrimaryOrganizationOperationCompleted(object arg) {
            if ((this.GetIndividualByPrimaryOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIndividualByPrimaryOrganizationCompleted(this, new GetIndividualByPrimaryOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetActiveSubscriptionByDate", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveSubscriptionByDate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string szStartDate, string szEndDate) {
            object[] results = this.Invoke("GetActiveSubscriptionByDate", new object[] {
                        szStartDate,
                        szEndDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveSubscriptionByDateAsync(string szStartDate, string szEndDate) {
            this.GetActiveSubscriptionByDateAsync(szStartDate, szEndDate, null);
        }
        
        /// <remarks/>
        public void GetActiveSubscriptionByDateAsync(string szStartDate, string szEndDate, object userState) {
            if ((this.GetActiveSubscriptionByDateOperationCompleted == null)) {
                this.GetActiveSubscriptionByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveSubscriptionByDateOperationCompleted);
            }
            this.InvokeAsync("GetActiveSubscriptionByDate", new object[] {
                        szStartDate,
                        szEndDate}, this.GetActiveSubscriptionByDateOperationCompleted, userState);
        }
        
        private void OnGetActiveSubscriptionByDateOperationCompleted(object arg) {
            if ((this.GetActiveSubscriptionByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveSubscriptionByDateCompleted(this, new GetActiveSubscriptionByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/UpdateRegistrationBadgePrintDateByRegKey", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateRegistrationBadgePrintDateByRegKey(string regKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string registrationBadgePrintDate) {
            object[] results = this.Invoke("UpdateRegistrationBadgePrintDateByRegKey", new object[] {
                        regKey,
                        registrationBadgePrintDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRegistrationBadgePrintDateByRegKeyAsync(string regKey, string registrationBadgePrintDate) {
            this.UpdateRegistrationBadgePrintDateByRegKeyAsync(regKey, registrationBadgePrintDate, null);
        }
        
        /// <remarks/>
        public void UpdateRegistrationBadgePrintDateByRegKeyAsync(string regKey, string registrationBadgePrintDate, object userState) {
            if ((this.UpdateRegistrationBadgePrintDateByRegKeyOperationCompleted == null)) {
                this.UpdateRegistrationBadgePrintDateByRegKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRegistrationBadgePrintDateByRegKeyOperationCompleted);
            }
            this.InvokeAsync("UpdateRegistrationBadgePrintDateByRegKey", new object[] {
                        regKey,
                        registrationBadgePrintDate}, this.UpdateRegistrationBadgePrintDateByRegKeyOperationCompleted, userState);
        }
        
        private void OnUpdateRegistrationBadgePrintDateByRegKeyOperationCompleted(object arg) {
            if ((this.UpdateRegistrationBadgePrintDateByRegKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRegistrationBadgePrintDateByRegKeyCompleted(this, new UpdateRegistrationBadgePrintDateByRegKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthorizationTokenValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.avectra.com/OnDemand/2005/GetOrganizationsByPrimaryIndividual", RequestNamespace="http://www.avectra.com/OnDemand/2005/", ResponseNamespace="http://www.avectra.com/OnDemand/2005/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexedResultListOfOrganizationByPrimaryInd GetOrganizationsByPrimaryIndividual([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string individualKey, string recordDate) {
            object[] results = this.Invoke("GetOrganizationsByPrimaryIndividual", new object[] {
                        individualKey,
                        recordDate});
            return ((IndexedResultListOfOrganizationByPrimaryInd)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationsByPrimaryIndividualAsync(string individualKey, string recordDate) {
            this.GetOrganizationsByPrimaryIndividualAsync(individualKey, recordDate, null);
        }
        
        /// <remarks/>
        public void GetOrganizationsByPrimaryIndividualAsync(string individualKey, string recordDate, object userState) {
            if ((this.GetOrganizationsByPrimaryIndividualOperationCompleted == null)) {
                this.GetOrganizationsByPrimaryIndividualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationsByPrimaryIndividualOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationsByPrimaryIndividual", new object[] {
                        individualKey,
                        recordDate}, this.GetOrganizationsByPrimaryIndividualOperationCompleted, userState);
        }
        
        private void OnGetOrganizationsByPrimaryIndividualOperationCompleted(object arg) {
            if ((this.GetOrganizationsByPrimaryIndividualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationsByPrimaryIndividualCompleted(this, new GetOrganizationsByPrimaryIndividualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.avectra.com/OnDemand/2005/", IsNullable=false)]
    public partial class AuthorizationToken : System.Web.Services.Protocols.SoapHeader {
        
        private string tokenField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class OrganizationByPrimaryInd {
        
        private string cst_idField;
        
        private string org_cst_keyField;
        
        private string org_sort_nameField;
        
        private string primary_ind_cst_keyField;
        
        private string primary_ind_sort_nameField;
        
        private string org_adr_line1Field;
        
        private string org_adr_line2Field;
        
        private string org_adr_line3Field;
        
        private string org_adr_cityField;
        
        private string org_adr_stateField;
        
        private string org_adr_post_codeField;
        
        private string org_adr_countryField;
        
        private string org_phn_numberField;
        
        private string org_add_dateField;
        
        private string org_add_userField;
        
        private string org_change_dateField;
        
        private string org_change_userField;
        
        /// <remarks/>
        public string cst_id {
            get {
                return this.cst_idField;
            }
            set {
                this.cst_idField = value;
            }
        }
        
        /// <remarks/>
        public string org_cst_key {
            get {
                return this.org_cst_keyField;
            }
            set {
                this.org_cst_keyField = value;
            }
        }
        
        /// <remarks/>
        public string org_sort_name {
            get {
                return this.org_sort_nameField;
            }
            set {
                this.org_sort_nameField = value;
            }
        }
        
        /// <remarks/>
        public string primary_ind_cst_key {
            get {
                return this.primary_ind_cst_keyField;
            }
            set {
                this.primary_ind_cst_keyField = value;
            }
        }
        
        /// <remarks/>
        public string primary_ind_sort_name {
            get {
                return this.primary_ind_sort_nameField;
            }
            set {
                this.primary_ind_sort_nameField = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_line1 {
            get {
                return this.org_adr_line1Field;
            }
            set {
                this.org_adr_line1Field = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_line2 {
            get {
                return this.org_adr_line2Field;
            }
            set {
                this.org_adr_line2Field = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_line3 {
            get {
                return this.org_adr_line3Field;
            }
            set {
                this.org_adr_line3Field = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_city {
            get {
                return this.org_adr_cityField;
            }
            set {
                this.org_adr_cityField = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_state {
            get {
                return this.org_adr_stateField;
            }
            set {
                this.org_adr_stateField = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_post_code {
            get {
                return this.org_adr_post_codeField;
            }
            set {
                this.org_adr_post_codeField = value;
            }
        }
        
        /// <remarks/>
        public string org_adr_country {
            get {
                return this.org_adr_countryField;
            }
            set {
                this.org_adr_countryField = value;
            }
        }
        
        /// <remarks/>
        public string org_phn_number {
            get {
                return this.org_phn_numberField;
            }
            set {
                this.org_phn_numberField = value;
            }
        }
        
        /// <remarks/>
        public string org_add_date {
            get {
                return this.org_add_dateField;
            }
            set {
                this.org_add_dateField = value;
            }
        }
        
        /// <remarks/>
        public string org_add_user {
            get {
                return this.org_add_userField;
            }
            set {
                this.org_add_userField = value;
            }
        }
        
        /// <remarks/>
        public string org_change_date {
            get {
                return this.org_change_dateField;
            }
            set {
                this.org_change_dateField = value;
            }
        }
        
        /// <remarks/>
        public string org_change_user {
            get {
                return this.org_change_userField;
            }
            set {
                this.org_change_userField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IndexedResultListOfOrganizationByPrimaryInd))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class ResultListOfOrganizationByPrimaryInd {
        
        private OrganizationByPrimaryInd[] resultField;
        
        private string userNameField;
        
        private int recordReturnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        public OrganizationByPrimaryInd[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int recordReturn {
            get {
                return this.recordReturnField;
            }
            set {
                this.recordReturnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class IndexedResultListOfOrganizationByPrimaryInd : ResultListOfOrganizationByPrimaryInd {
        
        private string lastIndexField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string lastIndex {
            get {
                return this.lastIndexField;
            }
            set {
                this.lastIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class IndividualRelationshipResult {
        
        private string ind_cst_keyField;
        
        private string cst_sort_name_dnField;
        
        private string cst_idField;
        
        private bool cst_member_flagField;
        
        private bool cst_receives_benefits_flagField;
        
        private string ixo_rlt_codeField;
        
        private string ixo_titleField;
        
        private string ixo_start_dateField;
        
        private string ixo_end_dateField;
        
        /// <remarks/>
        public string ind_cst_key {
            get {
                return this.ind_cst_keyField;
            }
            set {
                this.ind_cst_keyField = value;
            }
        }
        
        /// <remarks/>
        public string cst_sort_name_dn {
            get {
                return this.cst_sort_name_dnField;
            }
            set {
                this.cst_sort_name_dnField = value;
            }
        }
        
        /// <remarks/>
        public string cst_id {
            get {
                return this.cst_idField;
            }
            set {
                this.cst_idField = value;
            }
        }
        
        /// <remarks/>
        public bool cst_member_flag {
            get {
                return this.cst_member_flagField;
            }
            set {
                this.cst_member_flagField = value;
            }
        }
        
        /// <remarks/>
        public bool cst_receives_benefits_flag {
            get {
                return this.cst_receives_benefits_flagField;
            }
            set {
                this.cst_receives_benefits_flagField = value;
            }
        }
        
        /// <remarks/>
        public string ixo_rlt_code {
            get {
                return this.ixo_rlt_codeField;
            }
            set {
                this.ixo_rlt_codeField = value;
            }
        }
        
        /// <remarks/>
        public string ixo_title {
            get {
                return this.ixo_titleField;
            }
            set {
                this.ixo_titleField = value;
            }
        }
        
        /// <remarks/>
        public string ixo_start_date {
            get {
                return this.ixo_start_dateField;
            }
            set {
                this.ixo_start_dateField = value;
            }
        }
        
        /// <remarks/>
        public string ixo_end_date {
            get {
                return this.ixo_end_dateField;
            }
            set {
                this.ixo_end_dateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IndexedResultListOfIndividualRelationshipResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class ResultListOfIndividualRelationshipResult {
        
        private IndividualRelationshipResult[] resultField;
        
        private string userNameField;
        
        private int recordReturnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        public IndividualRelationshipResult[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int recordReturn {
            get {
                return this.recordReturnField;
            }
            set {
                this.recordReturnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class IndexedResultListOfIndividualRelationshipResult : ResultListOfIndividualRelationshipResult {
        
        private string lastIndexField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string lastIndex {
            get {
                return this.lastIndexField;
            }
            set {
                this.lastIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class OrganizationByTypeResult {
        
        private string org_cst_keyField;
        
        private string org_nameField;
        
        private string org_ogt_codeField;
        
        private string cst_idField;
        
        private bool cst_member_flagField;
        
        private bool cst_receives_benefits_flagField;
        
        /// <remarks/>
        public string org_cst_key {
            get {
                return this.org_cst_keyField;
            }
            set {
                this.org_cst_keyField = value;
            }
        }
        
        /// <remarks/>
        public string org_name {
            get {
                return this.org_nameField;
            }
            set {
                this.org_nameField = value;
            }
        }
        
        /// <remarks/>
        public string org_ogt_code {
            get {
                return this.org_ogt_codeField;
            }
            set {
                this.org_ogt_codeField = value;
            }
        }
        
        /// <remarks/>
        public string cst_id {
            get {
                return this.cst_idField;
            }
            set {
                this.cst_idField = value;
            }
        }
        
        /// <remarks/>
        public bool cst_member_flag {
            get {
                return this.cst_member_flagField;
            }
            set {
                this.cst_member_flagField = value;
            }
        }
        
        /// <remarks/>
        public bool cst_receives_benefits_flag {
            get {
                return this.cst_receives_benefits_flagField;
            }
            set {
                this.cst_receives_benefits_flagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IndexedResultListOfOrganizationByTypeResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class ResultListOfOrganizationByTypeResult {
        
        private OrganizationByTypeResult[] resultField;
        
        private string userNameField;
        
        private int recordReturnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        public OrganizationByTypeResult[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int recordReturn {
            get {
                return this.recordReturnField;
            }
            set {
                this.recordReturnField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.avectra.com/OnDemand/2005/")]
    public partial class IndexedResultListOfOrganizationByTypeResult : ResultListOfOrganizationByTypeResult {
        
        private string lastIndexField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string lastIndex {
            get {
                return this.lastIndexField;
            }
            set {
                this.lastIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFacadeXMLSchemaCompletedEventHandler(object sender, GetFacadeXMLSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacadeXMLSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacadeXMLSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFacadeObjectCompletedEventHandler(object sender, GetFacadeObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacadeObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacadeObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueryCompletedEventHandler(object sender, GetQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQuery2CompletedEventHandler(object sender, GetQuery2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuery2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuery2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerBalanceCompletedEventHandler(object sender, GetCustomerBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerMembershipCompletedEventHandler(object sender, GetCustomerMembershipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerMembershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByZipCompletedEventHandler(object sender, GetCustomerByZipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByZipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByZipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByCityStateCompletedEventHandler(object sender, GetCustomerByCityStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByCityStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByCityStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByCityStateMembershipCompletedEventHandler(object sender, GetCustomerByCityStateMembershipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByCityStateMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByCityStateMembershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByRadiusCompletedEventHandler(object sender, GetCustomerByRadiusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByRadiusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByRadiusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByRadiusAddressTypeCompletedEventHandler(object sender, GetCustomerByRadiusAddressTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByRadiusAddressTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByRadiusAddressTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByRecordDateCompletedEventHandler(object sender, GetCustomerByRecordDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByRecordDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByRecordDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByNameCompletedEventHandler(object sender, GetCustomerByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerDirectoryByNameCompletedEventHandler(object sender, GetCustomerDirectoryByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerDirectoryByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerDirectoryByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByKeyCompletedEventHandler(object sender, GetCustomerByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByIdCompletedEventHandler(object sender, GetCustomerByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByEmailCompletedEventHandler(object sender, GetCustomerByEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByWebsiteCompletedEventHandler(object sender, GetCustomerByWebsiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByWebsiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByWebsiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerEventCompletedEventHandler(object sender, GetCustomerEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventRegistrantByKeyCompletedEventHandler(object sender, GetEventRegistrantByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventRegistrantByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventRegistrantByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRegistrantsByKeyCompletedEventHandler(object sender, GetRegistrantsByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegistrantsByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegistrantsByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerSessionCompletedEventHandler(object sender, GetCustomerSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventListByNameCompletedEventHandler(object sender, GetEventListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveEventListByNameCompletedEventHandler(object sender, GetActiveEventListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveEventListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveEventListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveEventListByDateCompletedEventHandler(object sender, GetActiveEventListByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveEventListByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveEventListByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventByKeyCompletedEventHandler(object sender, GetEventByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventByProductKeyCompletedEventHandler(object sender, GetEventByProductKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventByProductKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventByProductKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSessionListByNameCompletedEventHandler(object sender, GetSessionListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSessionByKeyCompletedEventHandler(object sender, GetSessionByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerTicketedSessionsByRegKeyCompletedEventHandler(object sender, GetCustomerTicketedSessionsByRegKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerTicketedSessionsByRegKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerTicketedSessionsByRegKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSessionListByEventCompletedEventHandler(object sender, GetSessionListByEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionListByEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionListByEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventCustomerListCompletedEventHandler(object sender, GetEventCustomerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventCustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventCustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSessionCustomerListCompletedEventHandler(object sender, GetSessionCustomerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionCustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionCustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProductBalancesCompletedEventHandler(object sender, GetProductBalancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductBalancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductBalancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckEWebUserCompletedEventHandler(object sender, CheckEWebUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEWebUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEWebUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommitteeByKeyCompletedEventHandler(object sender, GetCommitteeByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitteeByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitteeByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommitteeByCodeCompletedEventHandler(object sender, GetCommitteeByCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitteeByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitteeByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommitteeListByCodeCompletedEventHandler(object sender, GetCommitteeListByCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitteeListByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitteeListByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommitteeListByCstIdCompletedEventHandler(object sender, GetCommitteeListByCstIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitteeListByCstIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitteeListByCstIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommitteePatricipationByCstIdCompletedEventHandler(object sender, GetCommitteePatricipationByCstIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitteePatricipationByCstIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitteePatricipationByCstIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveProductListCompletedEventHandler(object sender, GetActiveProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveProductListByIndividualCompletedEventHandler(object sender, GetActiveProductListByIndividualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveProductListByIndividualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveProductListByIndividualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPricesByProductKeyCompletedEventHandler(object sender, GetPricesByProductKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPricesByProductKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPricesByProductKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveProductListByCustomerCompletedEventHandler(object sender, GetActiveProductListByCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveProductListByCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveProductListByCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveSubscriptionByCustomerCompletedEventHandler(object sender, GetActiveSubscriptionByCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveSubscriptionByCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveSubscriptionByCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMembershipProxyListCompletedEventHandler(object sender, GetMembershipProxyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMembershipProxyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMembershipProxyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMembershipsByCustomerCompletedEventHandler(object sender, GetMembershipsByCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMembershipsByCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMembershipsByCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NewOrganizationInformationCompletedEventHandler(object sender, NewOrganizationInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewOrganizationInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewOrganizationInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetOrganizationInformationCompletedEventHandler(object sender, SetOrganizationInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOrganizationInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetOrganizationInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NewIndividualInformationCompletedEventHandler(object sender, NewIndividualInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewIndividualInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewIndividualInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetIndividualInformationCompletedEventHandler(object sender, SetIndividualInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIndividualInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIndividualInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddCustomerRelationshipCompletedEventHandler(object sender, AddCustomerRelationshipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomerRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomerRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetCustomerRelationshipCompletedEventHandler(object sender, SetCustomerRelationshipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCustomerRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCustomerRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerActivityHistoryCompletedEventHandler(object sender, GetCustomerActivityHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerActivityHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerActivityHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NewHistoricalActivityCompletedEventHandler(object sender, NewHistoricalActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewHistoricalActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewHistoricalActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetHistoricalActivityCompletedEventHandler(object sender, SetHistoricalActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetHistoricalActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetHistoricalActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertificationProductsCompletedEventHandler(object sender, GetCertificationProductsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificationProductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificationProductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertificantsCompletedEventHandler(object sender, GetCertificantsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificantsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificantsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertificationProgramsCompletedEventHandler(object sender, GetCertificationProgramsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificationProgramsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificationProgramsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertificantsByProgramCompletedEventHandler(object sender, GetCertificantsByProgramCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificantsByProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificantsByProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPropertyByOwnerCompletedEventHandler(object sender, GetPropertyByOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyByOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyByOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPropertyByCategoryCompletedEventHandler(object sender, GetPropertyByCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyByCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyByCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPropertyCategoriesCompletedEventHandler(object sender, GetPropertyCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPropertyByTypeCompletedEventHandler(object sender, GetPropertyByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPropertyTypesCompletedEventHandler(object sender, GetPropertyTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMultiSelectValuesCompletedEventHandler(object sender, GetMultiSelectValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultiSelectValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultiSelectValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAwardEntriesByCustomerCompletedEventHandler(object sender, GetAwardEntriesByCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAwardEntriesByCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAwardEntriesByCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAwardEntriesByAwardCompletedEventHandler(object sender, GetAwardEntriesByAwardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAwardEntriesByAwardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAwardEntriesByAwardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAwardJudgesCompletedEventHandler(object sender, GetAwardJudgesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAwardJudgesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAwardJudgesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLocationByEventCompletedEventHandler(object sender, GetLocationByEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationByEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationByEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTracksByEventCompletedEventHandler(object sender, GetTracksByEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTracksByEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTracksByEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSessionsByTrackCodeCompletedEventHandler(object sender, GetSessionsByTrackCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionsByTrackCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionsByTrackCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRoomByLocationCompletedEventHandler(object sender, GetRoomByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoomByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoomByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRoomSessionByLocationCompletedEventHandler(object sender, GetRoomSessionByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoomSessionByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoomSessionByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSpeakerInfoBySessionKeyCompletedEventHandler(object sender, GetSpeakerInfoBySessionKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpeakerInfoBySessionKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpeakerInfoBySessionKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIndividualChangesByDateCompletedEventHandler(object sender, GetIndividualChangesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIndividualChangesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIndividualChangesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOrganizationChangesByDateCompletedEventHandler(object sender, GetOrganizationChangesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationChangesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationChangesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMembershipChangesByDateCompletedEventHandler(object sender, GetMembershipChangesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMembershipChangesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMembershipChangesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRegistrantChangesByDateCompletedEventHandler(object sender, GetRegistrantChangesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegistrantChangesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegistrantChangesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommitteeParticipationChangesByDateCompletedEventHandler(object sender, GetCommitteeParticipationChangesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitteeParticipationChangesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitteeParticipationChangesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIndividualByDemographicCompletedEventHandler(object sender, GetIndividualByDemographicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIndividualByDemographicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIndividualByDemographicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOrganizationByDemographicCompletedEventHandler(object sender, GetOrganizationByDemographicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationByDemographicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationByDemographicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventFeesByEventKeyCompletedEventHandler(object sender, GetEventFeesByEventKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventFeesByEventKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventFeesByEventKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCstKeyFromLicenseNumberCompletedEventHandler(object sender, GetCstKeyFromLicenseNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCstKeyFromLicenseNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCstKeyFromLicenseNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCstKeyFromRealtorIdCompletedEventHandler(object sender, GetCstKeyFromRealtorIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCstKeyFromRealtorIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCstKeyFromRealtorIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerByMembershipTypeCompletedEventHandler(object sender, GetCustomerByMembershipTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerByMembershipTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerByMembershipTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetChildOrgsByParentOrgKeyCompletedEventHandler(object sender, GetChildOrgsByParentOrgKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildOrgsByParentOrgKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildOrgsByParentOrgKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerRealtorMembershipListCompletedEventHandler(object sender, GetCustomerRealtorMembershipListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerRealtorMembershipListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerRealtorMembershipListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOrganizationByTypeCompletedEventHandler(object sender, GetOrganizationByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexedResultListOfOrganizationByTypeResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexedResultListOfOrganizationByTypeResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEventListByTypeCompletedEventHandler(object sender, GetEventListByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventListByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventListByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProductListByTypeCompletedEventHandler(object sender, GetProductListByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIndividualListByOrganizationRelationshipCompletedEventHandler(object sender, GetIndividualListByOrganizationRelationshipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIndividualListByOrganizationRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIndividualListByOrganizationRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexedResultListOfIndividualRelationshipResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexedResultListOfIndividualRelationshipResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIndividualListByChangedDateRelationshipCompletedEventHandler(object sender, GetIndividualListByChangedDateRelationshipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIndividualListByChangedDateRelationshipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIndividualListByChangedDateRelationshipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexedResultListOfIndividualRelationshipResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexedResultListOfIndividualRelationshipResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRelationshipsByIndividualCompletedEventHandler(object sender, GetRelationshipsByIndividualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRelationshipsByIndividualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRelationshipsByIndividualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerCertificationsCompletedEventHandler(object sender, GetCustomerCertificationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerCertificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerCertificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIndividualByPrimaryOrganizationCompletedEventHandler(object sender, GetIndividualByPrimaryOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIndividualByPrimaryOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIndividualByPrimaryOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveSubscriptionByDateCompletedEventHandler(object sender, GetActiveSubscriptionByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveSubscriptionByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveSubscriptionByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateRegistrationBadgePrintDateByRegKeyCompletedEventHandler(object sender, UpdateRegistrationBadgePrintDateByRegKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRegistrationBadgePrintDateByRegKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRegistrationBadgePrintDateByRegKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOrganizationsByPrimaryIndividualCompletedEventHandler(object sender, GetOrganizationsByPrimaryIndividualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationsByPrimaryIndividualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationsByPrimaryIndividualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexedResultListOfOrganizationByPrimaryInd Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexedResultListOfOrganizationByPrimaryInd)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591